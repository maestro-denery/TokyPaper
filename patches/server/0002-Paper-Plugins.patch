From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Wed, 6 Jul 2022 23:00:31 -0400
Subject: [PATCH] Paper Plugins

Squashed Patches:
These patches (will) be merged into this as this PR removes the usages of the files that these patches modify.

- Fix plugin provides load order (Nassim Jahnke <jahnke.nassim@gmail.com>)
- Don't load plugins prefixed with a dot (Noah van der Aa <ndvdaa@gmail.com>)
- Remove deadlock risk in firing async events (Aikar <aikar@aikar.co>)
- Disable Sync Events firing Async errors during shutdown (Aikar <aikar@aikar.co>)
- List all missing hard depends not just first (Jake Potrebic <jake.m.potrebic@gmail.com>)
- Update Folder Uses Plugin Name (Xemorr <31805746+Xemorr@users.noreply.github.com>)
- Close Plugin Class Loaders on Disable (Aikar <aikar@aikar.co>)
- Make JavaPluginLoader thread-safe (Trigary <trigary0@gmail.com>)
- Prioritise own classes where possible (Mariell Hoversholm <proximyst@proximyst.com>)
- Automatically disable plugins that fail to load (Aikar <aikar@aikar.co>)
- Add an asterisk to legacy API plugins (Phoenix616 <max@themoep.de>)
- Make /plugins list alphabetical (BillyGalbreath <Blake.Galbreath@GMail.com>)

PATCHES TO MODIFY:
- Add command line option to load extra plugin jars not in the plugins folder (Jason Penilla <11360596+jpenilla@users.noreply.github.com>)
- Add command to reload permissions.yml and require confirm to reload (William <admin@domnian.com>)
- Add exception reporting event (Zach Brown <zach.brown@destroystokyo.com>)
- Added missing default perms for commands (Jake Potrebic <jake.m.potrebic@gmail.com>) (creates a SimplePluginManager)
- Use ASM for event executors (Techcable <Techcable@outlook.com>)

diff --git a/src/main/java/io/papermc/paper/command/PaperCommands.java b/src/main/java/io/papermc/paper/command/PaperCommands.java
index d31b5ed47cffc61c90c926a0cd2005b72ebddfc5..bbb8b1933ef33a3b91f69545f69dd3cfb84b27f5 100644
--- a/src/main/java/io/papermc/paper/command/PaperCommands.java
+++ b/src/main/java/io/papermc/paper/command/PaperCommands.java
@@ -24,5 +24,6 @@ public final class PaperCommands {
         COMMANDS.forEach((s, command) -> {
             server.server.getCommandMap().register(s, "Paper", command);
         });
+        server.server.getCommandMap().register("bukkit", new PaperPluginsCommand());
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ff90f2e11f9576693fcf93af47ebca83aeefb0dc
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
@@ -0,0 +1,218 @@
+package io.papermc.paper.command;
+
+import com.google.common.collect.Lists;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.provider.service.entrypoint.ServerEntryPointHandler;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginProvider;
+import io.papermc.paper.plugin.provider.type.spigot.SpigotPluginProvider;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.JoinConfiguration;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.event.ClickEvent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.defaults.BukkitCommand;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.TreeMap;
+
+public class PaperPluginsCommand extends BukkitCommand {
+
+    private static final TextColor INFO_COLOR = TextColor.color(52, 159, 218);
+
+    // TODO: LINK?
+    private static final Component SERVER_PLUGIN_INFO = Component.text("ℹ What is a server plugin?", INFO_COLOR)
+        .append(asPlainComponents("""
+            Server plugins can add new behavior to your server!
+            You can find new plugins on Paper's plugin repository, Hangar.
+
+            <link to hangar>
+            """));
+
+    private static final Component SERVER_INITIALIZER_INFO = Component.text("ℹ What is a server initializer?", INFO_COLOR)
+        .append(asPlainComponents("""
+            Server initializers are ran before your server
+            starts and are provided by paper plugins.
+            """));
+
+    private static final Component LEGACY_PLUGIN_INFO = Component.text("ℹ What is a legacy plugin?", INFO_COLOR)
+        .append(asPlainComponents("""
+            A legacy plugin is a plugin that was made on
+            very old unsupported versions of the game.
+
+            It is encouraged that you replace this plugin,
+            as they might not work in the future and may cause
+            performance issues.
+            """));
+
+    private static final Component INFO_ICON_START = Component.text("ℹ ", INFO_COLOR);
+
+    private static final Component PAPER_HEADER = Component.text("Paper Plugins:", TextColor.color(2, 136, 209));
+    private static final Component BUKKIT_HEADER = Component.text("Bukkit Plugins:", TextColor.color(237, 129, 6));
+
+    private static final Component PLUGIN_TICK = Component.text("- ", NamedTextColor.DARK_GRAY);
+    private static final Component PLUGIN_TICK_EMPTY = Component.text(" ");
+
+    private static final Component LEGACY_PLUGIN_STAR = Component.text('*', TextColor.color(255, 212, 42))
+        .hoverEvent(LEGACY_PLUGIN_INFO);
+
+    public PaperPluginsCommand() {
+        super("plugins");
+        this.description = "Gets a list of plugins running on the server";
+        this.usageMessage = "/plugins";
+        this.setPermission("bukkit.command.plugins");
+        this.setAliases(Arrays.asList("pl"));
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+        if (!this.testPermission(sender)) return true;
+
+        // Plugins
+        {
+            TreeMap<String, PluginProvider<JavaPlugin>> paperPlugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+            TreeMap<String, PluginProvider<JavaPlugin>> spigotPlugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+
+
+            for (PluginProvider<JavaPlugin> provider : ServerEntryPointHandler.INSTANCE.get(Entrypoint.PLUGIN).getRegisteredProviders()) {
+                PluginConfiguration configuration = provider.getConfiguration();
+
+                if (provider instanceof SpigotPluginProvider) {
+                    spigotPlugins.put(configuration.getDisplayName(), provider);
+                } else if (provider instanceof PaperPluginProvider.PaperServerPluginProvider) {
+                    paperPlugins.put(configuration.getDisplayName(), provider);
+                }
+            }
+
+            sender.sendMessage(INFO_ICON_START.hoverEvent(SERVER_PLUGIN_INFO).append(Component.text("Server Plugins (%s):".formatted(paperPlugins.size() + spigotPlugins.size()), NamedTextColor.WHITE)));
+            sender.sendMessage(PAPER_HEADER);
+            for (Component component : formatProviders(paperPlugins)) {
+                sender.sendMessage(component);
+            }
+            sender.sendMessage(BUKKIT_HEADER);
+            for (Component component : formatProviders(spigotPlugins)) {
+                sender.sendMessage(component);
+            }
+
+        }
+
+        // Providers
+        /*
+        {
+            TreeMap<String, PluginProvider<Initializer>> providers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+            for (PluginProvider<Initializer> provider : PreInitProviderStorage.INSTANCE.getRegisteredProviders()) {
+                providers.put(provider.getConfiguration().getIdentifier(), provider);
+            }
+
+            sender.sendMessage(INFO_ICON_START.hoverEvent(SERVER_INITIALIZER_INFO).append(Component.text("Server Initializers (%s):".formatted(providers.size()), NamedTextColor.WHITE)));
+            sender.sendMessage(formatProviders(providers));
+
+        }
+         */
+        return true;
+    }
+
+    @NotNull
+    @Override
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    private static <T> List<Component> formatProviders(TreeMap<String, PluginProvider<T>> plugins) {
+        List<Component> components = new ArrayList<>(plugins.size());
+        for (PluginProvider<T> entry : plugins.values()) {
+            components.add(formatProvider(entry));
+        }
+
+        boolean isFirst = true;
+        List<Component> formattedSublists = new ArrayList<>();
+        /*
+        Split up the plugin list for each 10 plugins to get size down
+
+        Plugin List:
+        - Plugin 1, Plugin 2, .... Plugin 10,
+          Plugin 11, Plugin 12 ... Plugin 20,
+         */
+        for (List<Component> componentSublist : Lists.partition(components, 10)) {
+            Component component = Component.space();
+            if (isFirst) {
+                component = component.append(PLUGIN_TICK);
+                isFirst = false;
+            } else {
+                component = PLUGIN_TICK_EMPTY;
+                //formattedSublists.add(Component.empty()); // Add an empty line, the auto chat wrapping and this makes it quite jarring.
+            }
+
+            formattedSublists.add(component.append(Component.join(JoinConfiguration.commas(true), componentSublist)));
+        }
+
+        return formattedSublists;
+    }
+
+    private static Component formatProvider(PluginProvider<?> provider) {
+        TextComponent.Builder builder = Component.text();
+        if (provider instanceof SpigotPluginProvider spigotPluginProvider && spigotPluginProvider.isLegacy()) {
+            builder.append(LEGACY_PLUGIN_STAR);
+        }
+
+        String name = provider.getConfiguration().getIdentifier();
+        Component pluginName = Component.text(name, fromStatus(provider))
+            .clickEvent(ClickEvent.runCommand("/version " + name));
+
+        builder.append(pluginName);
+
+        return builder.build();
+    }
+
+    private static Component asPlainComponents(String strings) {
+        net.kyori.adventure.text.TextComponent.Builder builder = Component.text();
+        for (String string : strings.split("\n")) {
+            builder.append(Component.newline());
+            builder.append(Component.text(string, NamedTextColor.WHITE));
+        }
+
+        return builder.build();
+    }
+
+    private static TextColor fromStatus(PluginProvider<?> provider) {
+        if (provider instanceof ProviderStatusHolder statusHolder && statusHolder.getLastProvidedStatus() != null) {
+            ProviderStatus status = statusHolder.getLastProvidedStatus();
+
+            // Handle enabled/disabled game plugins
+            if (status == ProviderStatus.INITIALIZED && provider instanceof JavaPluginProvider javaPluginProvider) {
+                Plugin plugin = Bukkit.getPluginManager().getPlugin(javaPluginProvider.getConfiguration().getIdentifier());
+                // Plugin doesn't exist? Could be due to it being removed.
+                if (plugin == null) {
+                    return NamedTextColor.RED;
+                }
+
+                return plugin.isEnabled() ? NamedTextColor.GREEN : NamedTextColor.RED;
+            }
+
+            return switch (status) {
+                case INITIALIZED -> NamedTextColor.GREEN;
+                case ERRORED -> NamedTextColor.RED;
+            };
+        } else if (provider instanceof PaperPluginProvider.PaperServerPluginProvider serverPluginProvider && serverPluginProvider.shouldSkipCreation()) {
+            // Paper plugins will be skipped if their provider is skipped due to their initializer failing.
+            // Show them as red
+            return NamedTextColor.RED;
+        } else {
+            return NamedTextColor.GRAY;
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/DependencyContext.java b/src/main/java/io/papermc/paper/plugin/DependencyContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..93e15901fcc2c9fbed2dd55e31df30d16314ceef
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/DependencyContext.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+
+/*
+We need to be able to expose the dependency tree of when certain providers are being loaded.
+The issue is that we don't know where this context might be, as it might be in the actual storage that
+this will be needed or just in the plugin manager.
+
+We need this to be able to allow resolving other classes in the BootstrapProviderStorage, PluginProviderStorage, and then the PaperPluginManagerImpl.
+ */
+public interface DependencyContext {
+
+    boolean isTransitiveDependency(PluginConfiguration plugin, PluginConfiguration depend);
+
+    boolean hasDependency(String pluginIdentifier);
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/DependencyContextHolder.java b/src/main/java/io/papermc/paper/plugin/DependencyContextHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..0188d4e42d9a06df38ed02803dca79b80c4fad2b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/DependencyContextHolder.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin;
+
+public interface DependencyContextHolder {
+
+    void setContext(DependencyContext context);
+
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/GraphDependencyContext.java b/src/main/java/io/papermc/paper/plugin/GraphDependencyContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..cabe9a56df7553f083a5c2525693b17a44360563
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/GraphDependencyContext.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.plugin;
+
+import com.google.common.graph.Graph;
+import com.google.common.graph.Graphs;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+
+import java.util.Set;
+
+public class GraphDependencyContext implements DependencyContext {
+
+    private final Graph<String> dependencyGraph;
+
+    public GraphDependencyContext(Graph<String> dependencyGraph) {
+        this.dependencyGraph = dependencyGraph;
+    }
+
+    @Override
+    public boolean isTransitiveDependency(PluginConfiguration plugin, PluginConfiguration depend) {
+        String pluginIdentifier = plugin.getIdentifier();
+
+        if (this.dependencyGraph.nodes().contains(pluginIdentifier)) {
+            Set<String> reachableNodes = Graphs.reachableNodes(this.dependencyGraph, pluginIdentifier);
+            if (reachableNodes.contains(depend.getIdentifier())) {
+                return true;
+            }
+            for (String provided : depend.getProvides()) {
+                if (reachableNodes.contains(provided)) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean hasDependency(String pluginIdentifier) {
+        return this.dependencyGraph.nodes().contains(pluginIdentifier);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrapContextImpl.java b/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrapContextImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..cea81ae7c829f940c90f41e0bbb73bb96cdd3602
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrapContextImpl.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.plugin.bootstrap;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.logging.Logger;
+
+public record PluginBootstrapContextImpl(PluginProvider<?> provider,
+                                         Path dataFolder) implements PluginBootstrapContext {
+
+    public static PluginBootstrapContextImpl of(PluginProvider<?> provider, Path pluginFolder) {
+        Path dataFolder = pluginFolder.resolve(provider.getConfiguration().getDisplayName());
+
+        return new PluginBootstrapContextImpl(provider, dataFolder);
+    }
+
+    @Override
+    public @NotNull PluginConfiguration getConfiguration() {
+        return this.provider.getConfiguration();
+    }
+
+    @Override
+    public @NotNull Path getDataDirectory() {
+        return this.dataFolder;
+    }
+
+    @Override
+    public @NotNull Path getConfigurationFile() {
+        return this.dataFolder.resolve("config.yml");
+    }
+
+    @Override
+    public @NotNull Logger getLogger() {
+        return this.provider.getLogger();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/loader/PaperClasspathBuilder.java b/src/main/java/io/papermc/paper/plugin/loader/PaperClasspathBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2b692047c5a7cf364889ce0cd957bb81b7c2858
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/loader/PaperClasspathBuilder.java
@@ -0,0 +1,50 @@
+package io.papermc.paper.plugin.loader;
+
+import io.papermc.paper.plugin.loader.library.ClassPathLibrary;
+import io.papermc.paper.plugin.loader.library.PaperLibraryStore;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoader;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PaperClasspathBuilder implements PluginClasspathBuilder {
+
+    private final List<ClassPathLibrary> libraries = new ArrayList<>();
+
+    @Override
+    public @NotNull PluginClasspathBuilder addLibrary(@NotNull ClassPathLibrary classPathLibrary) {
+        this.libraries.add(classPathLibrary);
+        return this;
+    }
+
+    public PaperPluginClassLoader buildClassLoader(PluginProvider<?> provider) {
+        PaperLibraryStore paperLibraryStore = new PaperLibraryStore();
+        for (ClassPathLibrary library : this.libraries) {
+            library.addToLibraryStore(paperLibraryStore);
+        }
+
+        List<Path> paths = paperLibraryStore.getPaths();
+        URL[] urls = new URL[paths.size()];
+        for (int i = 0; i < paths.size(); i++) {
+            Path path = paperLibraryStore.getPaths().get(i);
+            try {
+                urls[i] = path.toUri().toURL();
+            } catch (MalformedURLException e) {
+                throw new AssertionError(e);
+            }
+        }
+
+        try {
+            return new PaperPluginClassLoader(provider.getLogger(), provider.getSource(), provider.file(), provider.getConfiguration(), this.getClass().getClassLoader(), new URLClassLoader(urls));
+        } catch (IOException exception) {
+            throw new RuntimeException(exception);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/loader/library/PaperLibraryStore.java b/src/main/java/io/papermc/paper/plugin/loader/library/PaperLibraryStore.java
new file mode 100644
index 0000000000000000000000000000000000000000..5fcce65009f715d46dd3013f1f92ec8393d66e15
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/loader/library/PaperLibraryStore.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.plugin.loader.library;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PaperLibraryStore implements LibraryStore {
+
+    private final List<Path> paths = new ArrayList<>();
+
+    @Override
+    public void addLibrary(@NotNull Path library) {
+        this.paths.add(library);
+    }
+
+    public List<Path> getPaths() {
+        return this.paths;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/CapturingPluginEntrypoint.java b/src/main/java/io/papermc/paper/plugin/manager/CapturingPluginEntrypoint.java
new file mode 100644
index 0000000000000000000000000000000000000000..f72dc2655e8bf5bf311d0d05cc1470469092db48
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/CapturingPluginEntrypoint.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.plugin.manager;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.List;
+
+/**
+ * Used for loading plugins during runtime, only supporting providers that are plugins.
+ */
+public class CapturingPluginEntrypoint implements EntrypointHandler {
+
+    private final PluginManagerProviderStorage pluginProviderStorage = new PluginManagerProviderStorage();
+
+    private List<JavaPlugin> loaded;
+
+    @Override
+    public void enter(Entrypoint<?> entrypoint) {
+        if (entrypoint != Entrypoint.PLUGIN) {
+            throw new IllegalArgumentException("Only plugin entrypoint supported");
+        }
+        this.pluginProviderStorage.enter();
+        this.loaded = this.pluginProviderStorage.getLoaded();
+    }
+
+    public List<JavaPlugin> getLoaded() {
+        return this.loaded;
+    }
+
+    @Override
+    public <T> void register(Entrypoint<PluginProvider<T>> entrypoint, PluginProvider<T> provider) {
+        if (entrypoint != (Object) Entrypoint.PLUGIN) { // Awful hack to use object equality here.
+            SneakyThrow.sneaky(new InvalidPluginException("Plugin cannot register entrypoints other than PLUGIN during runtime. Tried registering %s!".formatted(entrypoint)));
+            // We have to throw an invalid plugin exception for legacy reasons
+        }
+        this.pluginProviderStorage.register((JavaPluginProvider) provider);
+    }
+
+    public Iterable<PluginProvider<JavaPlugin>> getProviders() {
+        return this.pluginProviderStorage.getRegisteredProviders();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/NormalPaperPermissionManager.java b/src/main/java/io/papermc/paper/plugin/manager/NormalPaperPermissionManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..29f8845bbad88e88e11e6365a867e37228bcf6fd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/NormalPaperPermissionManager.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.plugin.manager;
+
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+
+import java.util.*;
+
+class NormalPaperPermissionManager extends PaperPermissionManager {
+
+    private final Map<String, Permission> permissions = new HashMap<>();
+    private final Map<Boolean, Set<Permission>> defaultPerms = new LinkedHashMap<>();
+    private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<>();
+    private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<>();
+
+    public NormalPaperPermissionManager() {
+        this.defaultPerms().put(true, new LinkedHashSet<>());
+        this.defaultPerms().put(false, new LinkedHashSet<>());
+    }
+
+    @Override
+    public Map<String, Permission> permissions() {
+        return this.permissions;
+    }
+
+    @Override
+    public Map<Boolean, Set<Permission>> defaultPerms() {
+        return this.defaultPerms;
+    }
+
+    @Override
+    public Map<String, Map<Permissible, Boolean>> permSubs() {
+        return this.permSubs;
+    }
+
+    @Override
+    public Map<Boolean, Map<Permissible, Boolean>> defSubs() {
+        return this.defSubs;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..be11dbf67508fe5ecd744403881ffa7300c689fb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -0,0 +1,182 @@
+package io.papermc.paper.plugin.manager;
+
+import co.aikar.timings.TimedEventExecutor;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerEventException;
+import com.google.common.collect.Sets;
+import org.bukkit.Server;
+import org.bukkit.Warning;
+import org.bukkit.event.*;
+import org.bukkit.plugin.*;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Method;
+import java.util.*;
+import java.util.logging.Level;
+
+class PaperEventManager {
+
+    private final Server server;
+
+    public PaperEventManager(Server server) {
+        this.server = server;
+    }
+
+    // SimplePluginManager
+    public void callEvent(@NotNull Event event) {
+        if (event.isAsynchronous() && this.server.isPrimaryThread()) {
+            throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
+        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+            throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
+        }
+
+        HandlerList handlers = event.getHandlers();
+        RegisteredListener[] listeners = handlers.getRegisteredListeners();
+
+        for (RegisteredListener registration : listeners) {
+            if (!registration.getPlugin().isEnabled()) {
+                continue;
+            }
+
+            try {
+                registration.callEvent(event);
+            } catch (AuthorNagException ex) {
+                Plugin plugin = registration.getPlugin();
+
+                if (plugin.isNaggable()) {
+                    plugin.setNaggable(false);
+
+                    this.server.getLogger().log(Level.SEVERE, String.format(
+                        "Nag author(s): '%s' of '%s' about the following: %s",
+                        plugin.getConfiguration().getAuthors(),
+                        plugin.getConfiguration().getDisplayName(),
+                        ex.getMessage()
+                    ));
+                }
+            } catch (Throwable ex) {
+                String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getConfiguration().getDisplayName();
+                this.server.getLogger().log(Level.SEVERE, msg, ex);
+                if (!(event instanceof ServerExceptionEvent)) { // We don't want to cause an endless event loop
+                    this.callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
+                }
+            }
+        }
+    }
+
+    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+        if (!plugin.isEnabled()) {
+            throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
+        }
+
+        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : this.createRegisteredListeners(listener, plugin).entrySet()) {
+            this.getEventListeners(this.getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
+        }
+
+    }
+
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+        this.registerEvent(event, listener, priority, executor, plugin, false);
+    }
+
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+        if (!plugin.isEnabled()) {
+            throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
+        }
+
+        executor = new TimedEventExecutor(executor, plugin, null, event);
+        this.getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
+    }
+
+    @NotNull
+    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+        try {
+            Method method = this.getRegistrationClass(type).getDeclaredMethod("getHandlerList");
+            method.setAccessible(true);
+            return (HandlerList) method.invoke(null);
+        } catch (Exception e) {
+            throw new IllegalPluginAccessException(e.toString());
+        }
+    }
+
+    @NotNull
+    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+        try {
+            clazz.getDeclaredMethod("getHandlerList");
+            return clazz;
+        } catch (NoSuchMethodException e) {
+            if (clazz.getSuperclass() != null
+                && !clazz.getSuperclass().equals(Event.class)
+                && Event.class.isAssignableFrom(clazz.getSuperclass())) {
+                return this.getRegistrationClass(clazz.getSuperclass().asSubclass(Event.class));
+            } else {
+                throw new IllegalPluginAccessException("Unable to find handler list for event " + clazz.getName() + ". Static getHandlerList method required!");
+            }
+        }
+    }
+
+    // JavaPluginLoader
+    @NotNull
+    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
+        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
+
+        Set<Method> methods;
+        try {
+            Class<?> listenerClazz = listener.getClass();
+            methods = Sets.union(
+                Set.of(listenerClazz.getMethods()),
+                Set.of(listenerClazz.getDeclaredMethods())
+            );
+        } catch (NoClassDefFoundError e) {
+            plugin.getLogger().severe("Failed to register events for " + listener.getClass() + " because " + e.getMessage() + " does not exist.");
+            return ret;
+        }
+
+        for (final Method method : methods) {
+            final EventHandler eh = method.getAnnotation(EventHandler.class);
+            if (eh == null) continue;
+            // Do not register bridge or synthetic methods to avoid event duplication
+            // Fixes SPIGOT-893
+            if (method.isBridge() || method.isSynthetic()) {
+                continue;
+            }
+            final Class<?> checkClass;
+            if (method.getParameterTypes().length != 1 || !Event.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) {
+                plugin.getLogger().severe(plugin.getConfiguration().getDisplayName() + " attempted to register an invalid EventHandler method signature \"" + method.toGenericString() + "\" in " + listener.getClass());
+                continue;
+            }
+            final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
+            method.setAccessible(true);
+            Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
+
+            for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
+                // This loop checks for extending deprecated events
+                if (clazz.getAnnotation(Deprecated.class) != null) {
+                    Warning warning = clazz.getAnnotation(Warning.class);
+                    Warning.WarningState warningState = this.server.getWarningState();
+                    if (!warningState.printFor(warning)) {
+                        break;
+                    }
+                    plugin.getLogger().log(
+                        Level.WARNING,
+                        String.format(
+                            "\"%s\" has registered a listener for %s on method \"%s\", but the event is Deprecated. \"%s\"; please notify the authors %s.",
+                            plugin.getConfiguration().getDescription(),
+                            clazz.getName(),
+                            method.toGenericString(),
+                            (warning != null && warning.reason().length() != 0) ? warning.reason() : "Server performance will be affected",
+                            Arrays.toString(plugin.getConfiguration().getAuthors().toArray())),
+                        warningState == Warning.WarningState.ON ? new AuthorNagException(null) : null);
+                    break;
+                }
+            }
+
+            EventExecutor executor = new TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass);
+            eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
+        }
+        return ret;
+    }
+
+    public void clearEvents() {
+        HandlerList.unregisterAll();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPermissionManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPermissionManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..1cd7b52b22285c49d98d4d1e482d944d3e750e75
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPermissionManager.java
@@ -0,0 +1,196 @@
+package io.papermc.paper.plugin.manager;
+
+import com.google.common.collect.ImmutableSet;
+import io.papermc.paper.plugin.PermissionManager;
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+
+/**
+ * See
+ * {@link StupidSPMPermissionManagerWrapper}
+ */
+abstract class PaperPermissionManager implements PermissionManager {
+
+    public abstract Map<String, Permission> permissions();
+
+    public abstract Map<Boolean, Set<Permission>> defaultPerms();
+
+    public abstract Map<String, Map<Permissible, Boolean>> permSubs();
+
+    public abstract Map<Boolean, Map<Permissible, Boolean>> defSubs();
+
+    @Override
+    @Nullable
+    public Permission getPermission(@NotNull String name) {
+        return this.permissions().get(name.toLowerCase(java.util.Locale.ENGLISH));
+    }
+
+    @Override
+    public void addPermission(@NotNull Permission perm) {
+        this.addPermission(perm, true);
+    }
+
+    @Override
+    public void addPermissions(@NotNull List<Permission> permissions) {
+        for (Permission permission : permissions) {
+            this.addPermission(permission, false);
+        }
+        this.dirtyPermissibles();
+    }
+
+    // Allow suppressing permission default calculations
+    private void addPermission(@NotNull Permission perm, boolean dirty) {
+        String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+
+        if (this.permissions().containsKey(name)) {
+            throw new IllegalArgumentException("The permission " + name + " is already defined!");
+        }
+
+        this.permissions().put(name, perm);
+        this.calculatePermissionDefault(perm, dirty);
+    }
+
+    @Override
+    @NotNull
+    public Set<Permission> getDefaultPermissions(boolean op) {
+        return ImmutableSet.copyOf(this.defaultPerms().get(op));
+    }
+
+
+    @Override
+    public void removePermission(@NotNull Permission perm) {
+        this.removePermission(perm.getName());
+    }
+
+
+    @Override
+    public void removePermission(@NotNull String name) {
+        this.permissions().remove(name.toLowerCase(java.util.Locale.ENGLISH));
+    }
+
+    @Override
+    public void recalculatePermissionDefaults(@NotNull Permission perm) {
+        // we need a null check here because some plugins for some unknown reason pass null into this?
+        if (perm != null && this.permissions().containsKey(perm.getName().toLowerCase(Locale.ENGLISH))) {
+            this.defaultPerms().get(true).remove(perm);
+            this.defaultPerms().get(false).remove(perm);
+
+            this.calculatePermissionDefault(perm, true);
+        }
+    }
+
+    private void calculatePermissionDefault(@NotNull Permission perm, boolean dirty) {
+        if ((perm.getDefault() == PermissionDefault.OP) || (perm.getDefault() == PermissionDefault.TRUE)) {
+            this.defaultPerms().get(true).add(perm);
+            if (dirty) {
+                this.dirtyPermissibles(true);
+            }
+        }
+        if ((perm.getDefault() == PermissionDefault.NOT_OP) || (perm.getDefault() == PermissionDefault.TRUE)) {
+            this.defaultPerms().get(false).add(perm);
+            if (dirty) {
+                this.dirtyPermissibles(false);
+            }
+        }
+    }
+
+
+    @Override
+    public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible) {
+        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        Map<Permissible, Boolean> map = this.permSubs().computeIfAbsent(name, k -> new WeakHashMap<>());
+
+        map.put(permissible, true);
+    }
+
+    @Override
+    public void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible) {
+        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        Map<Permissible, Boolean> map = this.permSubs().get(name);
+
+        if (map != null) {
+            map.remove(permissible);
+
+            if (map.isEmpty()) {
+                this.permSubs().remove(name);
+            }
+        }
+    }
+
+    @Override
+    @NotNull
+    public Set<Permissible> getPermissionSubscriptions(@NotNull String permission) {
+        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        Map<Permissible, Boolean> map = this.permSubs().get(name);
+
+        if (map == null) {
+            return ImmutableSet.of();
+        } else {
+            return ImmutableSet.copyOf(map.keySet());
+        }
+    }
+
+    @Override
+    public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible) {
+        Map<Permissible, Boolean> map = this.defSubs().computeIfAbsent(op, k -> new WeakHashMap<>());
+
+        map.put(permissible, true);
+    }
+
+    @Override
+    public void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible) {
+        Map<Permissible, Boolean> map = this.defSubs().get(op);
+
+        if (map != null) {
+            map.remove(permissible);
+
+            if (map.isEmpty()) {
+                this.defSubs().remove(op);
+            }
+        }
+    }
+
+    @Override
+    @NotNull
+    public Set<Permissible> getDefaultPermSubscriptions(boolean op) {
+        Map<Permissible, Boolean> map = this.defSubs().get(op);
+
+        if (map == null) {
+            return ImmutableSet.of();
+        } else {
+            return ImmutableSet.copyOf(map.keySet());
+        }
+    }
+
+    @Override
+    @NotNull
+    public Set<Permission> getPermissions() {
+        return new HashSet<>(this.permissions().values());
+    }
+
+    @Override
+    public void clearPermissions() {
+        this.permissions().clear();
+        this.defaultPerms().get(true).clear();
+        this.defaultPerms().get(false).clear();
+    }
+
+
+    void dirtyPermissibles(boolean op) {
+        Set<Permissible> permissibles = this.getDefaultPermSubscriptions(op);
+
+        for (Permissible p : permissibles) {
+            p.recalculatePermissions();
+        }
+    }
+
+    void dirtyPermissibles() {
+        this.dirtyPermissibles(true);
+        this.dirtyPermissibles(false);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..0473d0a764016bcc127696e73e0c39149dfbf5eb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -0,0 +1,376 @@
+package io.papermc.paper.plugin.manager;
+
+import com.google.common.base.Preconditions;
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.Graphs;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommand;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommandMap;
+import io.papermc.paper.plugin.provider.service.classloader.ConfiguredPluginClassLoader;
+import io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoaderStorage;
+import io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+import io.papermc.paper.plugin.provider.source.impl.DirectoryProviderSource;
+import io.papermc.paper.plugin.provider.source.impl.FileProviderSource;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.World;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandMap;
+import org.bukkit.command.PluginCommand;
+import org.bukkit.command.PluginCommandYamlParser;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.server.PluginDisableEvent;
+import org.bukkit.event.server.PluginEnableEvent;
+import org.bukkit.plugin.*;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.spongepowered.configurate.serialize.SerializationException;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+class PaperPluginInstanceManager {
+
+    private static final FileProviderSource FILE_PROVIDER_SOURCE = new FileProviderSource(false);
+    private static final DirectoryProviderSource DIRECTORY_PROVIDER_SOURCE = new DirectoryProviderSource();
+
+    private final List<Plugin> plugins = new ArrayList<>();
+    private final Map<String, Plugin> lookupNames = new HashMap<>();
+
+    private final PluginManager pluginManager;
+    private final CommandMap commandMap;
+    private final Server server;
+
+    private final MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+
+    public PaperPluginInstanceManager(PluginManager pluginManager, CommandMap commandMap, Server server) {
+        this.commandMap = commandMap;
+        this.server = server;
+        this.pluginManager = pluginManager;
+    }
+
+    public @Nullable Plugin getPlugin(@NotNull String name) {
+        return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
+    }
+
+    public @NotNull Plugin[] getPlugins() {
+        return this.plugins.toArray(new Plugin[0]);
+    }
+
+    public boolean isPluginEnabled(@NotNull String name) {
+        Plugin plugin = this.getPlugin(name);
+
+        return this.isPluginEnabled(plugin);
+    }
+
+    public synchronized boolean isPluginEnabled(@Nullable Plugin plugin) {
+        if ((plugin != null) && (this.plugins.contains(plugin))) {
+            return plugin.isEnabled();
+        } else {
+            return false;
+        }
+    }
+
+    public void loadPlugin(Plugin provided) {
+        PluginConfiguration configuration = provided.getConfiguration();
+        String dependencyIdentifier = configuration.getIdentifier();
+
+        this.plugins.add(provided);
+        this.lookupNames.put(configuration.getIdentifier().toLowerCase(java.util.Locale.ENGLISH), provided);
+        for (String providedPlugin : configuration.getProvides()) {
+            this.lookupNames.putIfAbsent(providedPlugin.toLowerCase(java.util.Locale.ENGLISH), provided);
+        }
+
+        for (String dependency : configuration.getHardDependencies()) {
+            this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
+        }
+
+        for (String loadBeforeTarget : configuration.getLoadBefore()) {
+            this.dependencyGraph.putEdge(loadBeforeTarget, dependencyIdentifier);
+        }
+
+        for (String dependency : configuration.getSoftDependencies()) {
+            this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
+        }
+
+        this.dependencyGraph.addNode(dependencyIdentifier); // Make sure dependencies at least have a node
+    }
+
+    // InvalidDescriptionException is never used, because the old JavaPluginLoader would wrap the exception.
+    public @Nullable Plugin loadPlugin(@NotNull Path path) throws InvalidPluginException, UnknownDependencyException {
+        CapturingPluginEntrypoint runtimePluginEntrypointHandler = new CapturingPluginEntrypoint();
+
+        try {
+            FILE_PROVIDER_SOURCE.registerProviders(runtimePluginEntrypointHandler, path);
+        } catch (IllegalArgumentException exception) {
+            return null; // Return null when the plugin file is not valid / plugin type is unknown
+        } catch (PluginGraphCycleException exception) {
+            throw new InvalidPluginException("Cannot import plugin that causes cyclic dependencies!");
+        } catch (SerializationException |
+                 InvalidDescriptionException ex) { // The spigot implementation wraps it in an invalid plugin exception
+            throw new InvalidPluginException(ex);
+        } catch (Exception e) {
+            throw new InvalidPluginException(e);
+        }
+
+        try {
+            boolean isFirst = true;
+            for (PluginProvider<JavaPlugin> provider : runtimePluginEntrypointHandler.getProviders()) {
+                if (isFirst) {
+                    isFirst = false;
+                    // Manually validate dependencies, LEGACY BEHAVIOR.
+                    // Normally it is logged, but manually adding one plugin will cause it to actually throw exceptions.
+                    List<String> missingDependencies = new ArrayList<>();
+                    for (String dependency : provider.getConfiguration().getHardDependencies()) {
+                        if (!this.pluginManager.isPluginEnabled(dependency)) {
+                            missingDependencies.add(dependency);
+                        }
+                    }
+                    if (!missingDependencies.isEmpty()) {
+                        throw new UnknownDependencyException(missingDependencies, provider.getFileName().toString());
+                    }
+                } else {
+                    throw new InvalidPluginException("Plugin loaded multiple plugin providers... this shouldn't happen.");
+                }
+            }
+
+            runtimePluginEntrypointHandler.enter(Entrypoint.PLUGIN);
+        } catch (Throwable e) {
+            throw new InvalidPluginException(e);
+        }
+        List<JavaPlugin> pluginList = runtimePluginEntrypointHandler.getLoaded();
+        if (pluginList.isEmpty()) {
+            throw new InvalidPluginException("Plugin didn't load any plugin providers?");
+        }
+
+        return runtimePluginEntrypointHandler.getLoaded().get(0);
+    }
+
+    // The behavior of this is that all errors are logged instead of being thrown
+    public @NotNull Plugin[] loadPlugins(@NotNull Path directory) {
+        Preconditions.checkArgument(Files.isDirectory(directory), "Directory must be a directory"); // Avoid creating a directory if it doesn't exist
+
+        CapturingPluginEntrypoint runtimePluginEntrypointHandler = new CapturingPluginEntrypoint();
+        try {
+            DIRECTORY_PROVIDER_SOURCE.registerProviders(runtimePluginEntrypointHandler, directory);
+            runtimePluginEntrypointHandler.enter(Entrypoint.PLUGIN);
+        } catch (PluginGraphCycleException exception) {
+            Logger logger = this.server.getLogger();
+            logger.log(Level.SEVERE, "Circular dependencies detected while loading plugins through PluginManager.");
+            List<String> logMessages = new ArrayList<>();
+            for (List<String> list : exception.getCycles()) {
+                // CoolPlugin depends on Dependency depends on CoolPlugin...
+                logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+            }
+            for (String message : logMessages) {
+                logger.log(Level.SEVERE, message);
+            }
+        } catch (Exception e) {
+            // This should never happen, any errors that occur in this provider should instead be logged.
+            this.server.getLogger().log(Level.SEVERE, "Unknown error occurred while loading plugins through PluginManager.", e);
+        }
+
+        return runtimePluginEntrypointHandler.getLoaded().toArray(new JavaPlugin[0]);
+    }
+
+    // I do not know why....
+    // Not even going to touch this!
+    public void disablePlugins() {
+        Plugin[] plugins = this.getPlugins();
+        for (int i = plugins.length - 1; i >= 0; i--) {
+            this.disablePlugin(plugins[i]);
+        }
+    }
+
+    public void clearPlugins() {
+        synchronized (this) {
+            this.disablePlugins();
+            this.plugins.clear();
+            this.lookupNames.clear();
+        }
+    }
+
+    public synchronized void enablePlugin(@NotNull Plugin plugin) {
+        if (!plugin.isEnabled()) {
+            if (plugin.getConfiguration() instanceof PaperPluginConfiguration paperPluginConfiguration) {
+                PaperCommandMap commandMap = paperPluginConfiguration.getCommandMap();
+
+                for (Map.Entry<String, PaperCommand> entry : commandMap.getCommands().entrySet()) {
+                    Command newCmd = new PluginCommand(entry.getKey(), plugin);
+
+                    PaperCommand command = entry.getValue();
+
+                    String description = command.description();
+                    if (description != null) {
+                        newCmd.setDescription(description);
+                    }
+                    String usage = command.usage();
+                    if (usage != null) {
+                        newCmd.setUsage(usage);
+                    }
+                    String permission = command.permission();
+                    if (permission != null) {
+                        newCmd.setPermission(permission);
+                    }
+
+                    newCmd.setAliases(command.aliases());
+                    newCmd.permissionMessage(command.permissionMessage());
+
+                    this.commandMap.register(paperPluginConfiguration.getIdentifier(), newCmd);
+                }
+            } else {
+                List<Command> bukkitCommands = PluginCommandYamlParser.parse(plugin);
+
+                if (!bukkitCommands.isEmpty()) {
+                    this.commandMap.registerAll(plugin.getConfiguration().getIdentifier(), bukkitCommands);
+                }
+            }
+
+            try {
+                String enableMsg = "Enabling " + plugin.getConfiguration().getDisplayName();
+                if (plugin.getConfiguration() instanceof PluginDescriptionFile descriptionFile && descriptionFile.isLegacy()) {
+                    enableMsg += "*";
+                }
+                plugin.getLogger().info(enableMsg);
+
+                JavaPlugin jPlugin = (JavaPlugin) plugin;
+
+                if (jPlugin.getClass().getClassLoader() instanceof ConfiguredPluginClassLoader classLoader) { // Paper
+                    if (!PaperPluginClassLoaderStorage.INSTANCE.contains(classLoader)) {
+                        PaperPluginClassLoaderStorage.INSTANCE.add(classLoader);
+                        this.server.getLogger().log(Level.WARNING, "Enabled plugin with unregistered ConfiguredPluginClassLoader " + plugin.getConfiguration().getDisplayName());
+                    }
+                } // Paper
+
+                try {
+                    jPlugin.setEnabled(true);
+                } catch (Throwable ex) {
+                    this.server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getConfiguration().getDisplayName() + " (Is it up to date?)", ex);
+                    // Paper start - Disable plugins that fail to load
+                    this.server.getPluginManager().disablePlugin(jPlugin);
+                    return;
+                    // Paper end
+                }
+
+                // Perhaps abort here, rather than continue going, but as it stands,
+                // an abort is not possible the way it's currently written
+                this.server.getPluginManager().callEvent(new PluginEnableEvent(plugin));
+            } catch (Throwable ex) {
+                this.handlePluginException("Error occurred (in the plugin loader) while enabling "
+                    + plugin.getConfiguration().getDisplayName() + " (Is it up to date?)", ex, plugin);
+            }
+
+            HandlerList.bakeAll();
+        }
+    }
+
+    public synchronized void disablePlugin(@NotNull Plugin plugin) {
+        if (!(plugin instanceof JavaPlugin javaPlugin)) {
+            throw new IllegalArgumentException("Only expects java plugins.");
+        }
+        if (!plugin.isEnabled()) {
+            return;
+        }
+
+        String pluginName = plugin.getConfiguration().getDisplayName();
+
+        try {
+            plugin.getLogger().info("Disabling %s".formatted(pluginName));
+
+            this.server.getPluginManager().callEvent(new PluginDisableEvent(plugin));
+
+            javaPlugin.setEnabled(false);
+
+            ClassLoader classLoader = plugin.getClass().getClassLoader();
+            if (classLoader instanceof ConfiguredPluginClassLoader configuredPluginClassLoader) {
+                try {
+                    configuredPluginClassLoader.close();
+                } catch (IOException ex) {
+                    this.server.getLogger().log(Level.WARNING, "Error closing the classloader for '" + pluginName + "'", ex); // Paper - log exception
+                }
+                // Remove from the classloader pool inorder to prevent plugins from trying
+                // to access classes
+                PaperPluginClassLoaderStorage.INSTANCE.remove(configuredPluginClassLoader);
+            }
+
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while disabling "
+                + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+        try {
+            this.server.getScheduler().cancelTasks(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while cancelling tasks for "
+                + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+        try {
+            this.server.getServicesManager().unregisterAll(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while unregistering services for "
+                + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+        try {
+            HandlerList.unregisterAll(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while unregistering events for "
+                + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+        try {
+            this.server.getMessenger().unregisterIncomingPluginChannel(plugin);
+            this.server.getMessenger().unregisterOutgoingPluginChannel(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while unregistering plugin channels for "
+                + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+        try {
+            for (World world : this.server.getWorlds()) {
+                world.removePluginChunkTickets(plugin);
+            }
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while removing chunk tickets for " + pluginName + " (Is it up to date?)", ex, plugin); // Paper
+        }
+
+    }
+
+    // TODO: Implement event part in future patch (paper patch move up, this patch is lower)
+    private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
+        Bukkit.getServer().getLogger().log(Level.SEVERE, msg, ex);
+        this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerPluginEnableDisableException(msg, ex, plugin)));
+    }
+
+    public boolean isTransitiveDepend(@NotNull PluginConfiguration plugin, @NotNull PluginConfiguration depend) {
+        String pluginIdentifier = plugin.getIdentifier();
+
+        if (this.dependencyGraph.nodes().contains(pluginIdentifier)) {
+            Set<String> reachableNodes = Graphs.reachableNodes(this.dependencyGraph, pluginIdentifier);
+            if (reachableNodes.contains(depend.getIdentifier())) {
+                return true;
+            }
+            for (String provided : depend.getProvides()) {
+                if (reachableNodes.contains(provided)) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    public boolean hasDependency(String pluginIdentifier) {
+        return this.getPlugin(pluginIdentifier) != null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ed863fddf9fb1cad1261b1e865dfc2f768970f1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -0,0 +1,231 @@
+package io.papermc.paper.plugin.manager;
+
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.PermissionManager;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.CommandMap;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.plugin.*;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.List;
+import java.util.Set;
+
+public class PaperPluginManagerImpl implements PluginManager, DependencyContext {
+
+    private final PaperPluginInstanceManager instanceManager;
+    private final PaperEventManager paperEventManager;
+
+
+    private PermissionManager permissionManager;
+
+    public PaperPluginManagerImpl(Server server, CommandMap commandMap, @Nullable SimplePluginManager permissionManager) {
+        this.instanceManager = new PaperPluginInstanceManager(this, commandMap, server);
+        this.paperEventManager = new PaperEventManager(server);
+
+        if (permissionManager == null) {
+            this.permissionManager = new NormalPaperPermissionManager();
+        } else {
+            this.permissionManager = new StupidSPMPermissionManagerWrapper(permissionManager); // TODO: See comment when SimplePermissionManager is removed
+        }
+    }
+
+    // REMOVE THIS WHEN SimplePluginManager is removed.
+    // Just cast and use Bukkit.getServer().getPluginManager()
+    public static PaperPluginManagerImpl getInstance() {
+        return ((CraftServer) (Bukkit.getServer())).paperPluginManager;
+    }
+
+    // Plugin Manipulation
+
+    @Override
+    public @Nullable Plugin getPlugin(@NotNull String name) {
+        return this.instanceManager.getPlugin(name);
+    }
+
+    @Override
+    public @NotNull Plugin[] getPlugins() {
+        return this.instanceManager.getPlugins();
+    }
+
+    @Override
+    public boolean isPluginEnabled(@NotNull String name) {
+        return this.instanceManager.isPluginEnabled(name);
+    }
+
+    @Override
+    public boolean isPluginEnabled(@Nullable Plugin plugin) {
+        return this.instanceManager.isPluginEnabled(plugin);
+    }
+
+    public void loadPlugin(Plugin plugin) {
+        this.instanceManager.loadPlugin(plugin);
+    }
+
+    @Override
+    public @Nullable Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException {
+        return this.instanceManager.loadPlugin(file.toPath());
+    }
+
+    @Override
+    public @NotNull Plugin[] loadPlugins(@NotNull File directory) {
+        return this.instanceManager.loadPlugins(directory.toPath());
+    }
+
+    @Override
+    public void disablePlugins() {
+        this.instanceManager.disablePlugins();
+    }
+
+    @Override
+    public synchronized void clearPlugins() {
+        this.instanceManager.clearPlugins();
+        this.permissionManager.clearPermissions();
+        this.paperEventManager.clearEvents();
+    }
+
+    @Override
+    public void enablePlugin(@NotNull Plugin plugin) {
+        this.instanceManager.enablePlugin(plugin);
+    }
+
+    @Override
+    public void disablePlugin(@NotNull Plugin plugin) {
+        this.instanceManager.disablePlugin(plugin);
+    }
+
+    @Override
+    public boolean isTransitiveDependency(PluginConfiguration pluginConfiguration, PluginConfiguration dependencyConfig) {
+        return this.instanceManager.isTransitiveDepend(pluginConfiguration, dependencyConfig);
+    }
+
+    @Override
+    public boolean hasDependency(String pluginIdentifier) {
+        return this.instanceManager.hasDependency(pluginIdentifier);
+    }
+
+    // Event manipulation
+
+    @Override
+    public void callEvent(@NotNull Event event) throws IllegalStateException {
+        this.paperEventManager.callEvent(event);
+    }
+
+    @Override
+    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+        this.paperEventManager.registerEvents(listener, plugin);
+    }
+
+    @Override
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+        this.paperEventManager.registerEvent(event, listener, priority, executor, plugin);
+    }
+
+    @Override
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+        this.paperEventManager.registerEvent(event, listener, priority, executor, plugin, ignoreCancelled);
+    }
+
+    // Permission manipulation
+
+    @Override
+    public @Nullable Permission getPermission(@NotNull String name) {
+        return this.permissionManager.getPermission(name);
+    }
+
+    @Override
+    public void addPermission(@NotNull Permission perm) {
+        this.permissionManager.addPermission(perm);
+    }
+
+    @Override
+    public void removePermission(@NotNull Permission perm) {
+        this.permissionManager.removePermission(perm);
+    }
+
+    @Override
+    public void removePermission(@NotNull String name) {
+        this.permissionManager.removePermission(name);
+    }
+
+    @Override
+    public @NotNull Set<Permission> getDefaultPermissions(boolean op) {
+        return this.permissionManager.getDefaultPermissions(op);
+    }
+
+    @Override
+    public void recalculatePermissionDefaults(@NotNull Permission perm) {
+        this.permissionManager.recalculatePermissionDefaults(perm);
+    }
+
+    @Override
+    public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible) {
+        this.permissionManager.subscribeToPermission(permission, permissible);
+    }
+
+    @Override
+    public void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible) {
+        this.permissionManager.unsubscribeFromPermission(permission, permissible);
+    }
+
+    @Override
+    public @NotNull Set<Permissible> getPermissionSubscriptions(@NotNull String permission) {
+        return this.permissionManager.getPermissionSubscriptions(permission);
+    }
+
+    @Override
+    public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible) {
+        this.permissionManager.subscribeToDefaultPerms(op, permissible);
+    }
+
+    @Override
+    public void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible) {
+        this.permissionManager.unsubscribeFromDefaultPerms(op, permissible);
+    }
+
+    @Override
+    public @NotNull Set<Permissible> getDefaultPermSubscriptions(boolean op) {
+        return this.permissionManager.getDefaultPermSubscriptions(op);
+    }
+
+    @Override
+    public @NotNull Set<Permission> getPermissions() {
+        return this.permissionManager.getPermissions();
+    }
+
+    @Override
+    public void addPermissions(@NotNull List<Permission> perm) {
+        this.permissionManager.addPermissions(perm);
+    }
+
+    @Override
+    public void clearPermissions() {
+        this.permissionManager.clearPermissions();
+    }
+
+    @Override
+    public void overridePermissionManager(@Nullable Plugin plugin, @Nullable PermissionManager permissionManager) {
+        this.permissionManager = permissionManager;
+    }
+
+    // Etc
+
+    @Override
+    public boolean useTimings() {
+        return co.aikar.timings.Timings.isTimingsEnabled();
+    }
+
+    @Override
+    public void registerInterface(@NotNull Class<? extends PluginLoader> loader) throws IllegalArgumentException {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PluginManagerProviderStorage.java b/src/main/java/io/papermc/paper/plugin/manager/PluginManagerProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc272b2106818277d33e1427f11e214f8404e06d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/PluginManagerProviderStorage.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.plugin.manager;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.provider.service.entrypoint.ServerEntryPointHandler;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.ServerPluginProviderStorage;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+class PluginManagerProviderStorage extends ServerPluginProviderStorage {
+
+    private static final Logger LOGGER = Logger.getLogger("PluginManagerProviderStorage");
+
+    private final List<JavaPlugin> provided = new ArrayList<>();
+
+    @Override
+    public void register(PluginProvider<JavaPlugin> provider) {
+        super.register(provider);
+        /*
+        Register the provider into the server entrypoint, this allows it to show in /plugins correctly. Generally it might be better in the future to make a separate storage,
+        as putting it into the entrypoint handlers doesn't make much sense.
+         */
+        ServerEntryPointHandler.INSTANCE.register(Entrypoint.PLUGIN, provider);
+    }
+
+    @Override
+    public void processProvided(JavaPlugin provided) {
+        super.processProvided(provided);
+        this.provided.add(provided);
+    }
+
+    @Override
+    protected void handleCycle(PluginGraphCycleException exception) {
+        List<String> logMessages = new ArrayList<>();
+        for (List<String> list : exception.getCycles()) {
+            // CoolPlugin depends on Dependency depends on CoolPlugin...
+            logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+        }
+
+        LOGGER.log(Level.SEVERE, "Circular dependencies detected!");
+        LOGGER.log(Level.SEVERE, "You have a plugin that is depending on a plugin which refers back to that plugin.");
+        LOGGER.log(Level.SEVERE, "Circular dependencies:");
+        for (String message : logMessages) {
+            LOGGER.log(Level.SEVERE, message);
+        }
+    }
+
+    public List<JavaPlugin> getLoaded() {
+        return this.provided;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/StupidSPMPermissionManagerWrapper.java b/src/main/java/io/papermc/paper/plugin/manager/StupidSPMPermissionManagerWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..51133e01a6fb386ecc606322b9193504d5889131
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/manager/StupidSPMPermissionManagerWrapper.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.plugin.manager;
+
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.plugin.SimplePluginManager;
+
+import java.util.*;
+
+/*
+This is actually so cursed I hate it.
+We need to wrap these in fields as people override the fields, so we need to access them lazily at all times.
+// TODO: When SimplePluginManager is GONE remove this and cleanup the PaperPermissionManager to use actual fields.
+ */
+class StupidSPMPermissionManagerWrapper extends PaperPermissionManager {
+
+    private final SimplePluginManager simplePluginManager;
+
+    public StupidSPMPermissionManagerWrapper(SimplePluginManager simplePluginManager) {
+        this.simplePluginManager = simplePluginManager;
+    }
+
+    @Override
+    public Map<String, Permission> permissions() {
+        return this.simplePluginManager.permissions;
+    }
+
+    @Override
+    public Map<Boolean, Set<Permission>> defaultPerms() {
+        return this.simplePluginManager.defaultPerms;
+    }
+
+    @Override
+    public Map<String, Map<Permissible, Boolean>> permSubs() {
+        return this.simplePluginManager.permSubs;
+    }
+
+    @Override
+    public Map<Boolean, Map<Permissible, Boolean>> defSubs() {
+        return this.simplePluginManager.defSubs;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/PluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/PluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f0a0dadb1061b29b919729f3aea388986cdca14
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/PluginProvider.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.plugin.provider;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+@ApiStatus.Internal
+public interface PluginProvider<T> {
+
+    @NotNull
+    Path getSource();
+
+    default Path getFileName() {
+        return this.getSource().getFileName();
+    }
+
+    default Path getParentSource() {
+        return this.getSource().getParent();
+    }
+
+    JarFile file();
+
+    T createInstance();
+
+    PluginConfiguration getConfiguration();
+
+    Logger getLogger();
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java
new file mode 100644
index 0000000000000000000000000000000000000000..8eca2be3f446bde0cfc272288bb0b0c6e207c2d8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java
@@ -0,0 +1,9 @@
+package io.papermc.paper.plugin.provider;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public enum ProviderStatus {
+    INITIALIZED,
+    ERRORED,
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..94023e8b7f5011d4962e7859dd8771ab02f6dc11
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.provider;
+
+public interface ProviderStatusHolder {
+
+    ProviderStatus getLastProvidedStatus();
+
+    void setStatus(ProviderStatus status);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/FlattenedResolver.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/FlattenedResolver.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ba3bcc468c0a60c76d6d0f0243bda661c737f2f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/FlattenedResolver.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.plugin.provider.configuration;
+
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.spongepowered.configurate.objectmapping.meta.NodeResolver;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.AnnotatedElement;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface FlattenedResolver {
+
+    final class Factory implements NodeResolver.Factory {
+
+        @Override
+        public @Nullable NodeResolver make(String name, AnnotatedElement element) {
+            if (element.isAnnotationPresent(FlattenedResolver.class)) {
+                return (node) -> node;
+            } else {
+                return null;
+            }
+        }
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..463fb14cd395837957943c35b80183d83784e602
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java
@@ -0,0 +1,211 @@
+package io.papermc.paper.plugin.provider.configuration;
+
+import com.google.common.collect.ImmutableList;
+import io.leangen.geantyref.TypeToken;
+import io.papermc.paper.configuration.constraint.Constraint;
+import io.papermc.paper.configuration.serializer.ComponentSerializer;
+import io.papermc.paper.configuration.serializer.EnumValueSerializer;
+import io.papermc.paper.configuration.serializer.collections.MapSerializer;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.configuration.serializer.ImmutableListSerializer;
+import io.papermc.paper.plugin.provider.configuration.serializer.PermissionConfigurationSerializer;
+import io.papermc.paper.plugin.provider.configuration.serializer.constraints.PluginConfigConstraints;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommandMap;
+import io.papermc.paper.plugin.provider.configuration.type.PermissionConfiguration;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.PluginLoadOrder;
+import org.jetbrains.annotations.NotNull;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.loader.HeaderMode;
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.objectmapping.meta.Required;
+import org.spongepowered.configurate.yaml.NodeStyle;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+
+import java.io.BufferedReader;
+import java.util.List;
+import java.util.Map;
+
+@SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
+@ConfigSerializable
+public class PaperPluginConfiguration implements PluginConfiguration {
+
+    @PluginConfigConstraints.PluginName
+    @Required
+    private String name;
+    @Required
+    @PluginConfigConstraints.PluginNameSpace
+    private String main;
+    @PluginConfigConstraints.PluginNameSpace
+    private String bootstrapper;
+    @PluginConfigConstraints.PluginNameSpace
+    private String loader;
+    private List<String> depend = List.of();
+    private List<String> softDepend = List.of();
+    private List<String> loadBefore = List.of();
+    private List<String> provides = List.of();
+    @Required
+    private String version;
+    @FlattenedResolver
+    private PaperCommandMap commandMap = new PaperCommandMap(Map.of());
+    private String description;
+    private List<String> authors = List.of();
+    private List<String> contributors = List.of();
+    private String website;
+    private String prefix;
+    private PluginLoadOrder load = PluginLoadOrder.POSTWORLD;
+    @FlattenedResolver
+    private PermissionConfiguration permissionConfiguration = new PermissionConfiguration(PermissionDefault.OP, List.of());
+    @Required
+    @PluginConfigConstraints.PluginVersion
+    private String apiVersion;
+
+    private transient String displayName;
+
+    public PaperPluginConfiguration() {
+    }
+
+    public static PaperPluginConfiguration create(BufferedReader reader) throws ConfigurateException {
+        YamlConfigurationLoader loader = YamlConfigurationLoader.builder()
+            .indent(2)
+            .nodeStyle(NodeStyle.BLOCK)
+            .headerMode(HeaderMode.NONE)
+            .source(() -> reader)
+            .defaultOptions((options) -> {
+
+                return options.serializers((serializers) -> {
+                    serializers
+                        .register(new EnumValueSerializer())
+                        .register(MapSerializer.TYPE, new MapSerializer(false))
+                        .register(new TypeToken<>() {}, new ImmutableListSerializer())
+                        .register(PermissionConfiguration.class, PermissionConfigurationSerializer.SERIALIZER)
+                        .register(new ComponentSerializer())
+                        .registerAnnotatedObjects(
+                            ObjectMapper.factoryBuilder()
+                                .addConstraint(Constraint.class, new Constraint.Factory())
+                                .addConstraint(PluginConfigConstraints.PluginName.class, String.class, new PluginConfigConstraints.PluginName.Factory())
+                                .addConstraint(PluginConfigConstraints.PluginVersion.class, String.class, new PluginConfigConstraints.PluginVersion.Factory())
+                                .addConstraint(PluginConfigConstraints.PluginNameSpace.class, String.class, new PluginConfigConstraints.PluginNameSpace.Factory())
+                                .addNodeResolver(new FlattenedResolver.Factory())
+                                .build()
+                        );
+
+                });
+            })
+            .build();
+        CommentedConfigurationNode node = loader.load();
+        PaperPluginConfiguration pluginConfiguration = node.require(PaperPluginConfiguration.class);
+
+        // TODO: a better way to do this?
+        if (node.getString("author") != null) {
+            pluginConfiguration.authors = ImmutableList.<String>builder()
+                .addAll(pluginConfiguration.authors)
+                .add(node.getString("author"))
+                .build();
+        }
+
+        pluginConfiguration.displayName = pluginConfiguration.name.replace('_', ' ');
+
+        return pluginConfiguration;
+    }
+
+    @Override
+    public @NotNull String getIdentifier() {
+        return this.name;
+    }
+
+    @Override
+    public @NotNull String getMain() {
+        return this.main;
+    }
+
+    @Override
+    public @NotNull String getVersion() {
+        return this.version;
+    }
+
+    @Override
+    public @NotNull String getDisplayName() {
+        return this.displayName;
+    }
+
+    @Override
+    public @NotNull String getLoggingPrefix() {
+        return this.prefix;
+    }
+
+    @Override
+    public @NotNull List<String> getHardDependencies() {
+        return this.depend;
+    }
+
+    @Override
+    public @NotNull List<String> getSoftDependencies() {
+        return this.softDepend;
+    }
+
+    @Override
+    public @NotNull List<String> getLoadBefore() {
+        return this.loadBefore;
+    }
+
+    @Override
+    public @NotNull PluginLoadOrder getLoadPhase() {
+        return this.load;
+    }
+
+    @Override
+    public @NotNull String getDescription() {
+        return this.description;
+    }
+
+    @Override
+    public @NotNull List<String> getAuthors() {
+        return this.authors;
+    }
+
+    @Override
+    public @NotNull List<String> getContributors() {
+        return this.contributors;
+    }
+
+    @Override
+    public String getWebsite() {
+        return this.website;
+    }
+
+    @Override
+    public @NotNull List<Permission> getPermissions() {
+        return this.permissionConfiguration.permissions();
+    }
+
+    @Override
+    public @NotNull PermissionDefault getDefaultPermission() {
+        return this.permissionConfiguration.defaultPerm();
+    }
+
+    @Override
+    public @NotNull String getApiVersion() {
+        return this.apiVersion;
+    }
+
+    @Override
+    public @NotNull List<String> getProvides() {
+        return this.provides;
+    }
+
+    public String getBootstrapper() {
+        return this.bootstrapper;
+    }
+
+    public String getLoader() {
+        return this.loader;
+    }
+
+    public PaperCommandMap getCommandMap() {
+        return this.commandMap;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableCollectionSerializer.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableCollectionSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0cdb1bab30faaa438aa3e6de6125ade3fae98c2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableCollectionSerializer.java
@@ -0,0 +1,90 @@
+package io.papermc.paper.plugin.provider.configuration.serializer;
+
+import com.google.common.collect.ImmutableCollection;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.ConfigurationOptions;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.serialize.TypeSerializer;
+import org.spongepowered.configurate.util.CheckedConsumer;
+
+import java.lang.reflect.Type;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+@SuppressWarnings("unchecked")
+public abstract class ImmutableCollectionSerializer<B extends ImmutableCollection.Builder<?>, T extends Collection<?>> implements TypeSerializer<T> {
+
+    protected ImmutableCollectionSerializer() {
+    }
+
+    @Override
+    public final T deserialize(final Type type, final ConfigurationNode node) throws SerializationException {
+        final Type entryType = this.elementType(type);
+        final @Nullable TypeSerializer<?> entrySerial = node.options().serializers().get(entryType);
+        if (entrySerial == null) {
+            throw new SerializationException(node, entryType, "No applicable type serializer for type");
+        }
+
+        if (node.isList()) {
+            final List<? extends ConfigurationNode> values = node.childrenList();
+            final B builder = this.createNew(values.size());
+            for (ConfigurationNode value : values) {
+                try {
+                    this.deserializeSingle(builder, entrySerial.deserialize(entryType, value));
+                } catch (final SerializationException ex) {
+                    ex.initPath(value::path);
+                    throw ex;
+                }
+            }
+            return (T) builder.build();
+        } else {
+            final @Nullable Object unwrappedVal = node.raw();
+            if (unwrappedVal != null) {
+                final B builder = this.createNew(1);
+                this.deserializeSingle(builder, entrySerial.deserialize(entryType, node));
+                return (T) builder.build();
+            }
+        }
+        return this.emptyValue(type, null);
+    }
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    @Override
+    public final void serialize(final Type type, final @Nullable T obj, final ConfigurationNode node) throws SerializationException {
+        final Type entryType = this.elementType(type);
+        final @Nullable TypeSerializer entrySerial = node.options().serializers().get(entryType);
+        if (entrySerial == null) {
+            throw new SerializationException(node, entryType, "No applicable type serializer for type");
+        }
+
+        node.raw(Collections.emptyList());
+        if (obj != null) {
+            this.forEachElement(obj, el -> {
+                final ConfigurationNode child = node.appendListNode();
+                try {
+                    entrySerial.serialize(entryType, el, child);
+                } catch (final SerializationException ex) {
+                    ex.initPath(child::path);
+                    throw ex;
+                }
+            });
+        }
+    }
+
+    @SuppressWarnings({"unchecked"})
+    @Override
+    public @Nullable T emptyValue(final Type specificType, final ConfigurationOptions options) {
+        return (T) this.createNew(0).build();
+    }
+
+    protected abstract Type elementType(Type containerType) throws SerializationException;
+
+    protected abstract B createNew(int size);
+
+    protected abstract void forEachElement(T collection, CheckedConsumer<Object, SerializationException> action) throws SerializationException;
+
+    protected abstract void deserializeSingle(B builder, @Nullable Object deserialized) throws SerializationException;
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableListSerializer.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableListSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..7757d7df70e39a6fe4d92d02b6f905a22f80dbf3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/ImmutableListSerializer.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.plugin.provider.configuration.serializer;
+
+import com.google.common.collect.ImmutableList;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.util.CheckedConsumer;
+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.List;
+
+public class ImmutableListSerializer extends ImmutableCollectionSerializer<ImmutableList.Builder<?>, List<?>> {
+
+    @Override
+    protected Type elementType(Type containerType) throws SerializationException {
+        if (!(containerType instanceof ParameterizedType)) {
+            throw new SerializationException(containerType, "Raw types are not supported for collections");
+        }
+        return ((ParameterizedType) containerType).getActualTypeArguments()[0];
+    }
+
+    @Override
+    protected ImmutableList.Builder<?> createNew(int size) {
+        return ImmutableList.builderWithExpectedSize(size);
+    }
+
+    @Override
+    protected void forEachElement(List<?> collection, CheckedConsumer<Object, SerializationException> action) throws SerializationException {
+        for (Object obj : collection) {
+            action.accept(obj);
+        }
+    }
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    @Override
+    protected void deserializeSingle(ImmutableList.Builder<?> builder, @Nullable Object deserialized) throws SerializationException {
+        if (deserialized == null) {
+            return;
+        }
+
+        ((ImmutableList.Builder) builder).add(deserialized);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/PermissionConfigurationSerializer.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/PermissionConfigurationSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1088e4b7fa5f8e689f23b150b83645ce1ae5a0e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/PermissionConfigurationSerializer.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.plugin.provider.configuration.serializer;
+
+import io.papermc.paper.plugin.provider.configuration.type.PermissionConfiguration;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.serialize.TypeSerializer;
+
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+public class PermissionConfigurationSerializer {
+
+    public static final Serializer SERIALIZER = new Serializer();
+
+    private static final class Serializer implements TypeSerializer<PermissionConfiguration> {
+        private Serializer() {
+            super();
+        }
+
+        @Override
+        public PermissionConfiguration deserialize(Type type, ConfigurationNode node) throws SerializationException {
+            Map<?, ?> map = (Map<?, ?>) node.node("permissions").raw();
+
+            PermissionDefault permissionDefault;
+            ConfigurationNode permNode = node.node("defaultPerm");
+            if (permNode.virtual()) {
+                permissionDefault = PermissionDefault.OP;
+            } else {
+                permissionDefault = PermissionDefault.getByName(permNode.getString());
+            }
+
+            List<Permission> result = new ArrayList<>();
+            if (map != null) {
+                for (Map.Entry<?, ?> entry : map.entrySet()) {
+                    try {
+                        result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), permissionDefault, result));
+                    } catch (Throwable ex) {
+                        throw new SerializationException(null, "Error loading permission %s".formatted(entry.getKey()), ex);
+                    }
+                }
+            }
+
+            return new PermissionConfiguration(permissionDefault, List.copyOf(result));
+        }
+
+        @Override
+        public void serialize(Type type, @org.checkerframework.checker.nullness.qual.Nullable PermissionConfiguration obj, ConfigurationNode node) throws SerializationException {
+
+        }
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java
new file mode 100644
index 0000000000000000000000000000000000000000..52451beed5ea8463bcabdd1289d64df5aa0f4deb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java
@@ -0,0 +1,82 @@
+package io.papermc.paper.plugin.provider.configuration.serializer.constraints;
+
+import io.papermc.paper.plugin.provider.util.NamespaceChecker;
+import org.spongepowered.configurate.objectmapping.meta.Constraint;
+import org.spongepowered.configurate.serialize.SerializationException;
+
+import java.lang.annotation.*;
+import java.lang.reflect.Type;
+import java.util.Locale;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+public final class PluginConfigConstraints {
+
+    public static final Set<String> RESERVED_KEYS = Set.of("bukkit", "minecraft", "mojang", "spigot", "paper");
+    public static final Set<String> VALID_PAPER_VERSIONS = Set.of("1.19");
+
+    @Documented
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    public @interface PluginName {
+
+        final class Factory implements Constraint.Factory<PluginName, String> {
+
+            private static final Pattern VALID_NAME = Pattern.compile("^[A-Za-z\\d _.-]+$");
+
+            @Override
+            public Constraint<String> make(PluginName data, Type type) {
+                return value -> {
+                    if (value != null) {
+                        if (RESERVED_KEYS.contains(value.toLowerCase(Locale.ROOT))) {
+                            throw new SerializationException("Restricted name, cannot use '%s' as a plugin name.".formatted(data));
+                        } else if (value.indexOf(' ') != -1) {
+                            // For legacy reasons, the space condition has a separate exception message.
+                            throw new SerializationException("Restricted name, cannot use 0x20 (space character) in a plugin name.");
+                        }
+
+                        if (!VALID_NAME.matcher(value).matches()) {
+                            throw new SerializationException("name '" + value + "' contains invalid characters.");
+                        }
+                    }
+                };
+            }
+        }
+    }
+
+    @Documented
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    public @interface PluginNameSpace {
+
+        final class Factory implements Constraint.Factory<PluginNameSpace, String> {
+
+            @Override
+            public Constraint<String> make(PluginNameSpace data, Type type) {
+                return value -> {
+                    if (value != null && !NamespaceChecker.isValidNameSpace(value)) {
+                        throw new SerializationException("provided class '%s' is in an invalid namespace.".formatted(value));
+                    }
+                };
+            }
+        }
+    }
+
+    @Documented
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    public @interface PluginVersion {
+
+        final class Factory implements Constraint.Factory<PluginVersion, String> {
+
+            @Override
+            public Constraint<String> make(PluginVersion data, Type type) {
+                return value -> {
+                    if (value != null && !VALID_PAPER_VERSIONS.contains(value)) {
+                        throw new SerializationException("Provided plugin's version (%s) is not supported on this version.".formatted(value));
+                    }
+                };
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommand.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..824f32258c2cc6a2908eca573fa14ea6756116e1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommand.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.plugin.provider.configuration.type;
+
+import net.kyori.adventure.text.Component;
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+
+import java.util.List;
+
+@ConfigSerializable
+public record PaperCommand(
+    String description,
+    String usage,
+    List<String> aliases,
+    String permission,
+    Component permissionMessage
+) {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f0d84573ca232b02232b98306168cd18d3b8c9e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.plugin.provider.configuration.type;
+
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+
+import java.util.Map;
+
+@ConfigSerializable
+public class PaperCommandMap {
+
+    private final Map<String, PaperCommand> commands;
+
+    public PaperCommandMap() {
+        this.commands = Map.of();
+    }
+
+    public PaperCommandMap(Map<String, PaperCommand> commands) {
+        this.commands = commands;
+    }
+
+    public Map<String, PaperCommand> getCommands() {
+        return this.commands;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PermissionConfiguration.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PermissionConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..a180612a1ec395202dbae1ca5b97ec01382097e4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PermissionConfiguration.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.plugin.provider.configuration.type;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+
+import java.util.List;
+
+// Record components used for deserialization!!!!
+@ConfigSerializable
+public record PermissionConfiguration(
+    PermissionDefault defaultPerm,
+    List<Permission> permissions) {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperClassloaderBytecodeModifier.java b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperClassloaderBytecodeModifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cfac374ac7288b458f01abb77ddf68e7d21a9e0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperClassloaderBytecodeModifier.java
@@ -0,0 +1,17 @@
+package io.papermc.paper.plugin.provider.service.classloader;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.classloader.bytecode.ClassloaderBytecodeModifier;
+
+// Stub, implement in future.
+public class PaperClassloaderBytecodeModifier extends ClassloaderBytecodeModifier {
+
+    public static void init() {
+        ClassloaderBytecodeModifier.setInstance(new PaperClassloaderBytecodeModifier());
+    }
+
+    @Override
+    public byte[] modify(PluginConfiguration configuration, byte[] bytecode) {
+        return bytecode;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperPluginClassLoader.java b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperPluginClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..c14201fd42bd1ffa5ae68dbd4184e55a83183638
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperPluginClassLoader.java
@@ -0,0 +1,161 @@
+package io.papermc.paper.plugin.provider.service.classloader;
+
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.DependencyContextHolder;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class PaperPluginClassLoader extends PaperSimplePluginClassLoader implements ConfiguredPluginClassLoader, DependencyContextHolder {
+
+    static {
+        registerAsParallelCapable();
+    }
+
+    private final PaperPluginClassLoaderStorage loader;
+    private final ClassLoader libraryLoader;
+    private final Set<String> seenIllegalAccess = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    private final Logger logger;
+    /*
+    We have to hackily store the dependency context here as we have to places
+    that we need to account for dependencies at.
+    We cannot be certain that the dependencies will be loaded the same in both places.
+     */
+    private DependencyContext dependencyContext;
+
+    public PaperPluginClassLoader(Logger logger, Path source, JarFile file, PluginConfiguration configuration, ClassLoader parentLoader, ClassLoader libraryLoader) throws IOException {
+        super(source, file, configuration, parentLoader);
+        this.loader = PaperPluginClassLoaderStorage.INSTANCE;
+        this.libraryLoader = libraryLoader;
+
+        this.logger = logger;
+    }
+
+    @Override
+    public URL getResource(String name) {
+        return this.findResource(name);
+    }
+
+    @Override
+    public Enumeration<URL> getResources(String name) throws IOException {
+        return this.findResources(name);
+    }
+
+    @Override
+    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+        return this.loadClass(name, resolve, true, true);
+    }
+
+    @Override
+    public PluginConfiguration getConfiguration() {
+        return this.configuration;
+    }
+
+    // TODO: ((SimplePluginManager) server.getPluginManager()).isTransitiveDepend(description, requester.getDescription())
+    @Override
+    public Class<?> loadClass(@NotNull String name, boolean resolve, boolean checkGlobal, boolean checkLibraries) throws ClassNotFoundException {
+        try {
+            Class<?> result = super.loadClass(name, resolve);
+
+            // SPIGOT-6749: Library classes will appear in the above, but we don't want to return them to other plugins
+            if (checkGlobal || result.getClassLoader() == this) {
+                return result;
+            }
+        } catch (ClassNotFoundException ex) {
+        }
+
+        if (checkLibraries) {
+            try {
+                return this.libraryLoader.loadClass(name);
+            } catch (ClassNotFoundException ex) {
+            }
+        }
+
+        if (checkGlobal) {
+            // This ignores the libraries of other plugins, unless they are transitive dependencies.
+            Class<?> result = this.loader.getClassByName(name, resolve, this.configuration, this);  // Paper - prioritize self
+
+            if (result != null) {
+                // If the class was loaded from a library instead of a PluginClassLoader, we can assume that its associated plugin is a transitive dependency and can therefore skip this check.
+                if (result.getClassLoader() instanceof PaperPluginClassLoader existingClassLoader) {
+                    PluginConfiguration classLoaderConfig = existingClassLoader.configuration;
+
+                    String identifier = classLoaderConfig.getIdentifier();
+                    if (classLoaderConfig != this.configuration && !this.seenIllegalAccess.contains(identifier) && !this.dependencyContext.isTransitiveDependency(this.configuration, classLoaderConfig)) {
+                        this.seenIllegalAccess.add(identifier);
+                        if (this.logger != null) {
+                            this.logger.warning("Loaded class '%s' from '%s' which is not a depend or softdepend of this plugin.".formatted(name, classLoaderConfig.getDisplayName()));
+                        }
+                    }
+                }
+
+                return result;
+            }
+        }
+
+        throw new ClassNotFoundException(name);
+    }
+
+    @Override
+    public void init(JavaPlugin plugin) {
+        PluginConfiguration config = this.configuration;
+        PluginDescriptionFile pluginDescriptionFile = new PluginDescriptionFile(
+            config.getIdentifier(),
+            config.getDisplayName(),
+            config.getProvides(),
+            config.getMain(),
+            "", // Classloader load order api
+            config.getHardDependencies(),
+            config.getSoftDependencies(),
+            config.getLoadBefore(),
+            config.getVersion(),
+            Map.of(), // Commands, we use a separate system
+            config.getDescription(),
+            config.getAuthors(),
+            config.getContributors(),
+            config.getWebsite(),
+            config.getLoggingPrefix(),
+            config.getLoadPhase(),
+            config.getPermissions(),
+            config.getDefaultPermission(),
+            Set.of(), // Aware api
+            config.getApiVersion(),
+            List.of() // Libraries
+        );
+
+        File dataFolder = new File(Bukkit.getPluginsFolder(), pluginDescriptionFile.getName());
+        PaperPluginClassLoaderStorage.INSTANCE.add(this);
+        plugin.init(Bukkit.getServer(), pluginDescriptionFile, dataFolder, this.source.toFile(), this, config);
+        plugin.logger = this.logger; // Paper - set logger
+    }
+
+    @Override
+    public String toString() {
+        return "PaperPluginClassLoader{" +
+            "loader=" + this.loader +
+            ", libraryLoader=" + this.libraryLoader +
+            ", seenIllegalAccess=" + this.seenIllegalAccess +
+            ", configuration=" + this.configuration +
+            ", source=" + this.source +
+            ", jarManifest=" + this.jarManifest +
+            ", jarUrl=" + this.jarUrl +
+            ", jar=" + this.jar +
+            '}';
+    }
+
+    @Override
+    public void setContext(DependencyContext context) {
+        this.dependencyContext = context;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperSimplePluginClassLoader.java b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperSimplePluginClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..180d52ce6cdd55540c5f86cbb5f67887a85d93e6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/classloader/PaperSimplePluginClassLoader.java
@@ -0,0 +1,117 @@
+package io.papermc.paper.plugin.provider.service.classloader;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.classloader.bytecode.ClassloaderBytecodeModifier;
+import io.papermc.paper.plugin.provider.util.NamespaceChecker;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.file.Path;
+import java.security.CodeSigner;
+import java.security.CodeSource;
+import java.util.Enumeration;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.jar.Manifest;
+
+/**
+ * Simple classloader used for plugin loaders.
+ * Supports bytecode manipulation
+ */
+@ApiStatus.Internal
+public class PaperSimplePluginClassLoader extends URLClassLoader {
+
+    static {
+        ClassLoader.registerAsParallelCapable();
+    }
+
+    protected final PluginConfiguration configuration;
+    protected final Path source;
+    protected final Manifest jarManifest;
+    protected final URL jarUrl;
+    protected final JarFile jar;
+
+    public PaperSimplePluginClassLoader(Path source, JarFile file, PluginConfiguration configuration, ClassLoader parentLoader) throws IOException {
+        super(source.getFileName().toString(), new URL[]{source.toUri().toURL()}, parentLoader);
+
+        this.source = source;
+        this.jarManifest = file.getManifest();
+        this.jarUrl = source.toUri().toURL();
+        this.configuration = configuration;
+        this.jar = file;
+    }
+
+    @Override
+    public URL getResource(String name) {
+        return this.findResource(name);
+    }
+
+    @Override
+    public Enumeration<URL> getResources(String name) throws IOException {
+        return this.findResources(name);
+    }
+
+    // Bytecode modification supported loader
+    protected Class<?> findClass(String name) throws ClassNotFoundException {
+        NamespaceChecker.validateNameSpaceForClassloading(name);
+
+        // See UrlClassLoader#findClass(String)
+        String path = name.replace('.', '/').concat(".class");
+        JarEntry entry = this.jar.getJarEntry(path);
+        if (entry == null) {
+            throw new ClassNotFoundException();
+        }
+
+        // See URLClassLoader#defineClass(String, Resource)
+        byte[] classBytes;
+
+        try (InputStream is = this.jar.getInputStream(entry)) {
+            classBytes = is.readAllBytes();
+        } catch (IOException ex) {
+            throw new ClassNotFoundException(name, ex);
+        }
+
+        classBytes = ClassloaderBytecodeModifier.INSTANCE.modify(this.configuration, classBytes);
+
+        int dot = name.lastIndexOf('.');
+        if (dot != -1) {
+            String pkgName = name.substring(0, dot);
+            // Get defined package does not correctly handle sealed packages.
+            if (this.getDefinedPackage(pkgName) == null) {
+                try {
+                    if (this.jarManifest != null) {
+                        this.definePackage(pkgName, this.jarManifest, this.jarUrl);
+                    } else {
+                        this.definePackage(pkgName, null, null, null, null, null, null, null);
+                    }
+                } catch (IllegalArgumentException ex) {
+                    // parallel-capable class loaders: re-verify in case of a
+                    // race condition
+                    if (this.getDefinedPackage(pkgName) == null) {
+                        // Should never happen
+                        throw new IllegalStateException("Cannot find package " + pkgName);
+                    }
+                }
+            }
+        }
+
+        CodeSigner[] signers = entry.getCodeSigners();
+        CodeSource source = new CodeSource(this.jarUrl, signers);
+
+        return this.defineClass(name, classBytes, 0, classBytes.length, source);
+    }
+
+    @Override
+    public String toString() {
+        return "PaperSimplePluginClassLoader{" +
+            "configuration=" + this.configuration +
+            ", source=" + this.source +
+            ", jarManifest=" + this.jarManifest +
+            ", jarUrl=" + this.jarUrl +
+            ", jar=" + this.jar +
+            '}';
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/Entrypoint.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/Entrypoint.java
new file mode 100644
index 0000000000000000000000000000000000000000..64ec8d5c945122d3143d2daf2b8f0b6d8c4bdb5d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/Entrypoint.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.plugin.provider.service.entrypoint;
+
+import io.papermc.paper.plugin.bootstrap.PluginBootstrap;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+
+public final class Entrypoint<T> {
+    public static final Entrypoint<PluginProvider<PluginBootstrap>> BOOTSTRAPPER = new Entrypoint<>();
+    public static final Entrypoint<PluginProvider<JavaPlugin>> PLUGIN = new Entrypoint<>();
+
+    private Entrypoint() {
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/EntrypointHandler.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/EntrypointHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..8455ee70ed94c8665b84e1244e94e7a2dfdab0f0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/EntrypointHandler.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.provider.service.entrypoint;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+public interface EntrypointHandler {
+
+    void enter(Entrypoint<?> entrypoint);
+
+    <T> void register(Entrypoint<PluginProvider<T>> entrypoint, PluginProvider<T> provider);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/ServerEntryPointHandler.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/ServerEntryPointHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8616cb2537dc3e27d3dee008f8a50837a13a286
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/ServerEntryPointHandler.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.plugin.provider.service.entrypoint;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ProviderStorage;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.BootstrapProviderStorage;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.ServerPluginProviderStorage;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ServerEntryPointHandler implements EntrypointHandler {
+
+    public static final ServerEntryPointHandler INSTANCE = new ServerEntryPointHandler();
+
+    private final Map<Entrypoint<?>, ProviderStorage<?>> storage = new HashMap<>();
+
+    public ServerEntryPointHandler() {
+        this.storage.put(Entrypoint.BOOTSTRAPPER, new BootstrapProviderStorage());
+        this.storage.put(Entrypoint.PLUGIN, new ServerPluginProviderStorage());
+    }
+
+    @Override
+    public void enter(Entrypoint<?> entrypoint) {
+        ProviderStorage<?> storage = this.storage.get(entrypoint);
+        if (storage == null) {
+            throw new IllegalArgumentException("No storage registered for entrypoint %s.".formatted(entrypoint));
+        }
+
+        storage.enter();
+    }
+
+    @Override
+    public <T> void register(Entrypoint<PluginProvider<T>> entrypoint, PluginProvider<T> provider) {
+        ProviderStorage<T> providerStorage = this.get(entrypoint);
+        if (providerStorage == null) {
+            throw new IllegalArgumentException("No storage registered for entrypoint %s.".formatted(entrypoint));
+        }
+
+        providerStorage.register(provider);
+    }
+
+
+    @SuppressWarnings("unchecked")
+    public <T> ProviderStorage<T> get(Entrypoint<PluginProvider<T>> entrypoint) {
+        return (ProviderStorage<T>) this.storage.get(entrypoint);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..20395788fb71f7876336a0c07a307bc38bc9259e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ProviderStorage.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+/**
+ * A provider storage is meant to be a singleton that stores providers.
+ *
+ * @param <T> provider type
+ */
+public interface ProviderStorage<T> {
+
+    void register(PluginProvider<T> provider);
+
+    void enter();
+
+    Iterable<PluginProvider<T>> getRegisteredProviders();
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/SimpleProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/SimpleProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ba8daac385844a2af4ab861f60837f26e8cd3d2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/SimpleProviderStorage.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class SimpleProviderStorage<T> implements ProviderStorage<T> {
+
+    protected final List<PluginProvider<T>> providers = new ArrayList<>();
+
+    @Override
+    public void register(PluginProvider<T> provider) {
+        this.providers.add(provider);
+    }
+
+    public List<PluginProvider<T>> registered() {
+        return this.providers;
+    }
+
+    @Override
+    public Iterable<PluginProvider<T>> getRegisteredProviders() {
+        return this.providers;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/BootstrapProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/BootstrapProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a30e697c3391b9cef814f33e5eb3f7502727df1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/BootstrapProviderStorage.java
@@ -0,0 +1,76 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered;
+
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.DependencyContextHolder;
+import io.papermc.paper.plugin.bootstrap.PluginBootstrap;
+import io.papermc.paper.plugin.bootstrap.PluginBootstrapContext;
+import io.papermc.paper.plugin.bootstrap.PluginBootstrapContextImpl;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.ModernPluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+import net.minecraft.server.Main;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class BootstrapProviderStorage extends OrderedProviderStorage<PluginBootstrap> {
+
+    private static final Logger LOGGER = Logger.getLogger("BootstrapProviderStorage");
+
+    public BootstrapProviderStorage() {
+        super(new ModernPluginLoadingStrategy<>(new ProviderLoader<>() {
+            @Override
+            public void applyContext(PluginProvider<PluginBootstrap> provider, DependencyContext dependencyContext) {
+                if (provider instanceof DependencyContextHolder contextHolder) {
+                    contextHolder.setContext(dependencyContext);
+                }
+            }
+
+            @Override
+            public boolean load(PluginProvider<PluginBootstrap> provider, PluginBootstrap provided) {
+                try {
+                    PluginBootstrapContext context = PluginBootstrapContextImpl.of(provider, Main.pluginDirectory);
+                    provided.boostrap(context);
+                    return true;
+                } catch (Exception e) {
+                    provider.getLogger().log(Level.SEVERE, "Failed to run bootstrapper for %s. This plugin will not be loaded.".formatted(provider.getSource()), e);
+                    if (provider instanceof ProviderStatusHolder statusHolder) {
+                        statusHolder.setStatus(ProviderStatus.ERRORED);
+                    }
+                    return false;
+                }
+            }
+        }));
+    }
+
+    @Override
+    public void processProvided(PluginBootstrap provided) {
+    }
+
+    @Override
+    protected void filterLoadingProviders(List<PluginProvider<PluginBootstrap>> pluginProviders) {
+    }
+
+    @Override
+    protected void handleCycle(PluginGraphCycleException exception) {
+        List<String> logMessages = new ArrayList<>();
+        for (List<String> list : exception.getCycles()) {
+            // CoolPlugin depends on Dependency depends on CoolPlugin...
+            logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+        }
+
+        LOGGER.log(Level.SEVERE, "Circular dependencies detected!");
+        LOGGER.log(Level.SEVERE, "You have a plugin that is depending on a plugin which refers back to that plugin. Your server will shut down until these are resolved, or the strategy is changed.");
+        LOGGER.log(Level.SEVERE, "Circular dependencies:");
+        for (String message : logMessages) {
+            LOGGER.log(Level.SEVERE, message);
+        }
+        LOGGER.log(Level.SEVERE, "If you would like to still load these plugins, acknowledging that there may be unexpected plugin loading issues, change plugin-loading-strategy in paper-global.yml to LEGACY.");
+
+        System.exit(-1);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ConfiguredOrderedProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ConfiguredOrderedProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..db3e979f570ddcfc80147d0c7160506ada7f6ad5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ConfiguredOrderedProviderStorage.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.LegacyPluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.ModernPluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public abstract class ConfiguredOrderedProviderStorage<T> extends OrderedProviderStorage<T> {
+
+    private static final Logger LOGGER = Logger.getLogger("ConfiguredOrderedProviderStorage");
+
+    // This doesn't work with reloading.
+    // Should we care?
+    public ConfiguredOrderedProviderStorage(ProviderLoader<T> onLoad) {
+        super(Boolean.getBoolean("paper.useLegacyPluginLoading") ? new LegacyPluginLoadingStrategy<>(onLoad) : new ModernPluginLoadingStrategy<>(onLoad));
+    }
+
+    @Override
+    protected void handleCycle(PluginGraphCycleException exception) {
+        List<String> logMessages = new ArrayList<>();
+        for (List<String> list : exception.getCycles()) {
+            // CoolPlugin depends on Dependency depends on CoolPlugin...
+            logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+        }
+
+        LOGGER.log(Level.SEVERE, "Circular dependencies detected!");
+        LOGGER.log(Level.SEVERE, "You have a plugin that is depending on a plugin which refers back to that plugin. Your server will shut down until these are resolved, or the strategy is changed.");
+        LOGGER.log(Level.SEVERE, "Circular dependencies:");
+        for (String message : logMessages) {
+            LOGGER.log(Level.SEVERE, message);
+        }
+        LOGGER.log(Level.SEVERE, "If you would like to still load these plugins, acknowledging that there may be unexpected plugin loading issues, run the server with -Dpaper.useLegacyPluginLoading=true");
+
+        System.exit(-1);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/OrderedProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/OrderedProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c53e096cfe72682ea0aeb58c39261028678cecd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/OrderedProviderStorage.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.SimpleProviderStorage;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.ProviderLoadingStrategy;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class OrderedProviderStorage<T> extends SimpleProviderStorage<T> {
+
+    protected final ProviderLoadingStrategy<T> strategy;
+
+    public OrderedProviderStorage(ProviderLoadingStrategy<T> strategy) {
+        this.strategy = strategy;
+    }
+
+    @Override
+    public void enter() {
+        List<PluginProvider<T>> providerList = new ArrayList<>(this.providers);
+        this.filterLoadingProviders(providerList);
+
+        try {
+            for (T plugin : this.strategy.loadProviders(providerList)) {
+                this.processProvided(plugin);
+            }
+        } catch (PluginGraphCycleException exception) {
+            this.handleCycle(exception);
+        }
+    }
+
+    public abstract void processProvided(T provided);
+
+    // Mutable enter
+    protected abstract void filterLoadingProviders(List<PluginProvider<T>> providers);
+
+    protected abstract void handleCycle(PluginGraphCycleException exception);
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ProviderLoader.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ProviderLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ddb96543ec54e7b0a1fd21bdec092bd58ae23e5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ProviderLoader.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered;
+
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+public interface ProviderLoader<T> {
+
+    void applyContext(PluginProvider<T> provider, DependencyContext dependencyContext);
+
+    boolean load(PluginProvider<T> provider, T provided);
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ServerPluginProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..88f570ae51511efc6a911f65ff000bf332d49eca
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/ServerPluginProviderStorage.java
@@ -0,0 +1,87 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered;
+
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.DependencyContextHolder;
+import io.papermc.paper.plugin.manager.PaperPluginManagerImpl;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommand;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommandMap;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.PluginGraphCycleException;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginProvider;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.PluginCommand;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ServerPluginProviderStorage extends ConfiguredOrderedProviderStorage<JavaPlugin> {
+
+    private static final Logger LOGGER = Logger.getLogger("ServerPluginProviderStorage");
+
+    public ServerPluginProviderStorage() {
+        super(new ProviderLoader<>() {
+            @Override
+            public void applyContext(PluginProvider<JavaPlugin> provider, DependencyContext dependencyContext) {
+                if (provider instanceof DependencyContextHolder contextHolder) {
+                    contextHolder.setContext(PaperPluginManagerImpl.getInstance());
+                }
+            }
+
+            @Override
+            public boolean load(PluginProvider<JavaPlugin> provider, JavaPlugin provided) {
+                try {
+                    provided.getLogger().info(String.format("Loading server plugin %s", provided.getConfiguration().getDisplayName()));
+                    PaperPluginManagerImpl.getInstance().loadPlugin(provided); // We have to add it to the map before the plugin is loaded
+                    provided.onLoad();
+                    return true;
+                } catch (Throwable ex) {
+                    if (provider instanceof ProviderStatusHolder statusHolder) {
+                        statusHolder.setStatus(ProviderStatus.ERRORED);
+                    }
+                    LOGGER.log(Level.WARNING, "Could not load server plugin '%s' in folder '%s' (Is it up to date?)".formatted(provider.getFileName(), provider.getParentSource()), ex);
+                    return false;
+                }
+            }
+        });
+    }
+
+    @Override
+    public void processProvided(JavaPlugin provided) {
+    }
+
+    @Override
+    protected void filterLoadingProviders(List<PluginProvider<JavaPlugin>> pluginProviders) {
+         /*
+        Have to do this to prevent loading plugin providers that have failed initializers.
+        This is a hack and a better solution here would be to store failed plugin providers elsewhere.
+         */
+        pluginProviders.removeIf((provider) -> (provider instanceof PaperPluginProvider.PaperServerPluginProvider pluginProvider && pluginProvider.shouldSkipCreation()));
+    }
+
+    @Override
+    protected void handleCycle(PluginGraphCycleException exception) {
+        List<String> logMessages = new ArrayList<>();
+        for (List<String> list : exception.getCycles()) {
+            // CoolPlugin depends on Dependency depends on CoolPlugin...
+            logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+        }
+
+        LOGGER.log(Level.SEVERE, "Circular dependencies detected!");
+        LOGGER.log(Level.SEVERE, "You have a plugin that is depending on a plugin which refers back to that plugin. Your server will shut down until these are resolved, or the strategy is changed.");
+        LOGGER.log(Level.SEVERE, "Circular dependencies:");
+        for (String message : logMessages) {
+            LOGGER.log(Level.SEVERE, message);
+        }
+        LOGGER.log(Level.SEVERE, "If you would like to still load these plugins, acknowledging that there may be unexpected plugin loading issues, change plugin-loading-strategy in paper-global.yml to LEGACY.");
+
+        System.exit(-1);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/GraphCycleException.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/GraphCycleException.java
new file mode 100644
index 0000000000000000000000000000000000000000..253f65643eb719d10ceb10a50ae6721bcfa41f8d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/GraphCycleException.java
@@ -0,0 +1,5 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+public class GraphCycleException extends RuntimeException {
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/JohnsonSimpleCycles.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/JohnsonSimpleCycles.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb9f96a018d32dfe8ec9df16ee833bf6a5ed7206
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/JohnsonSimpleCycles.java
@@ -0,0 +1,344 @@
+/*
+ * (C) Copyright 2013-2021, by Nikolay Ognyanov and Contributors.
+ *
+ * JGraphT : a free Java graph-theory library
+ *
+ * See the CONTRIBUTORS.md file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the
+ * GNU Lesser General Public License v2.1 or later
+ * which is available at
+ * http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR LGPL-2.1-or-later
+ */
+
+// MODIFICATIONS:
+// - Modified to use a guava graph directly
+
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import com.google.common.base.Preconditions;
+import com.google.common.graph.Graph;
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import com.mojang.datafixers.util.Pair;
+
+import java.util.*;
+import java.util.function.Consumer;
+
+/**
+ * Find all simple cycles of a directed graph using the Johnson's algorithm.
+ *
+ * <p>
+ * See:<br>
+ * D.B.Johnson, Finding all the elementary circuits of a directed graph, SIAM J. Comput., 4 (1975),
+ * pp. 77-84.
+ *
+ * @param <V> the vertex type.
+ *
+ * @author Nikolay Ognyanov
+ */
+public class JohnsonSimpleCycles<V>
+{
+    // The graph.
+    private Graph<V> graph;
+
+    // The main state of the algorithm.
+    private Consumer<List<V>> cycleConsumer = null;
+    private V[] iToV = null;
+    private Map<V, Integer> vToI = null;
+    private Set<V> blocked = null;
+    private Map<V, Set<V>> bSets = null;
+    private ArrayDeque<V> stack = null;
+
+    // The state of the embedded Tarjan SCC algorithm.
+    private List<Set<V>> foundSCCs = null;
+    private int index = 0;
+    private Map<V, Integer> vIndex = null;
+    private Map<V, Integer> vLowlink = null;
+    private ArrayDeque<V> path = null;
+    private Set<V> pathSet = null;
+
+    /**
+     * Create a simple cycle finder for the specified graph.
+     *
+     * @param graph - the DirectedGraph in which to find cycles.
+     *
+     * @throws IllegalArgumentException if the graph argument is <code>
+     * null</code>.
+     */
+    public JohnsonSimpleCycles(Graph<V> graph)
+    {
+        Preconditions.checkState(graph.isDirected(), "Graph must be directed");
+        this.graph = graph;
+    }
+
+    /**
+     * Find the simple cycles of the graph.
+     *
+     * @return The list of all simple cycles. Possibly empty but never <code>null</code>.
+     */
+    public List<List<V>> findSimpleCycles()
+    {
+        List<List<V>> result = new ArrayList<>();
+        findSimpleCycles(result::add);
+        return result;
+    }
+
+    /**
+     * Find the simple cycles of the graph.
+     *
+     * @param consumer Consumer that will be called with each cycle found.
+     */
+    public void findSimpleCycles(Consumer<List<V>> consumer)
+    {
+        if (graph == null) {
+            throw new IllegalArgumentException("Null graph.");
+        }
+        initState(consumer);
+
+        int startIndex = 0;
+        int size = graph.nodes().size();
+        while (startIndex < size) {
+            Pair<Graph<V>, Integer> minSCCGResult = findMinSCSG(startIndex);
+            if (minSCCGResult != null) {
+                startIndex = minSCCGResult.getSecond();
+                Graph<V> scg = minSCCGResult.getFirst();
+                V startV = toV(startIndex);
+                for (V v : scg.successors(startV)) {
+                    blocked.remove(v);
+                    getBSet(v).clear();
+                }
+                findCyclesInSCG(startIndex, startIndex, scg);
+                startIndex++;
+            } else {
+                break;
+            }
+        }
+
+        clearState();
+    }
+
+    private Pair<Graph<V>, Integer> findMinSCSG(int startIndex)
+    {
+        /*
+         * Per Johnson : "adjacency structure of strong component $K$ with least vertex in subgraph
+         * of $G$ induced by $(s, s + 1, n)$". Or in contemporary terms: the strongly connected
+         * component of the subgraph induced by $(v_1, \dotso ,v_n)$ which contains the minimum
+         * (among those SCCs) vertex index. We return that index together with the graph.
+         */
+        initMinSCGState();
+
+        List<Set<V>> foundSCCs = findSCCS(startIndex);
+
+        // find the SCC with the minimum index
+        int minIndexFound = Integer.MAX_VALUE;
+        Set<V> minSCC = null;
+        for (Set<V> scc : foundSCCs) {
+            for (V v : scc) {
+                int t = toI(v);
+                if (t < minIndexFound) {
+                    minIndexFound = t;
+                    minSCC = scc;
+                }
+            }
+        }
+        if (minSCC == null) {
+            return null;
+        }
+
+        // build a graph for the SCC found
+        MutableGraph<V> dependencyGraph = GraphBuilder.directed().allowsSelfLoops(true).build();
+
+        for (V v : minSCC) {
+            for (V w : minSCC) {
+                if (graph.hasEdgeConnecting(v, w)) {
+                    dependencyGraph.putEdge(v, w);
+                }
+            }
+        }
+
+        Pair<Graph<V>, Integer> result = Pair.of(dependencyGraph, minIndexFound);
+        clearMinSCCState();
+        return result;
+    }
+
+    private List<Set<V>> findSCCS(int startIndex)
+    {
+        // Find SCCs in the subgraph induced
+        // by vertices startIndex and beyond.
+        // A call to StrongConnectivityAlgorithm
+        // would be too expensive because of the
+        // need to materialize the subgraph.
+        // So - do a local search by the Tarjan's
+        // algorithm and pretend that vertices
+        // with an index smaller than startIndex
+        // do not exist.
+        for (V v : graph.nodes()) {
+            int vI = toI(v);
+            if (vI < startIndex) {
+                continue;
+            }
+            if (!vIndex.containsKey(v)) {
+                getSCCs(startIndex, vI);
+            }
+        }
+        List<Set<V>> result = foundSCCs;
+        foundSCCs = null;
+        return result;
+    }
+
+    private void getSCCs(int startIndex, int vertexIndex)
+    {
+        V vertex = toV(vertexIndex);
+        vIndex.put(vertex, index);
+        vLowlink.put(vertex, index);
+        index++;
+        path.push(vertex);
+        pathSet.add(vertex);
+
+        Set<V> edges = graph.successors(vertex);
+        for (V successor : edges) {
+            int successorIndex = toI(successor);
+            if (successorIndex < startIndex) {
+                continue;
+            }
+            if (!vIndex.containsKey(successor)) {
+                getSCCs(startIndex, successorIndex);
+                vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vLowlink.get(successor)));
+            } else if (pathSet.contains(successor)) {
+                vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vIndex.get(successor)));
+            }
+        }
+        if (vLowlink.get(vertex).equals(vIndex.get(vertex))) {
+            Set<V> result = new HashSet<>();
+            V temp;
+            do {
+                temp = path.pop();
+                pathSet.remove(temp);
+                result.add(temp);
+            } while (!vertex.equals(temp));
+            if (result.size() == 1) {
+                V v = result.iterator().next();
+                if (graph.edges().contains(vertex)) {
+                    foundSCCs.add(result);
+                }
+            } else {
+                foundSCCs.add(result);
+            }
+        }
+    }
+
+    private boolean findCyclesInSCG(int startIndex, int vertexIndex, Graph<V> scg)
+    {
+        /*
+         * Find cycles in a strongly connected graph per Johnson.
+         */
+        boolean foundCycle = false;
+        V vertex = toV(vertexIndex);
+        stack.push(vertex);
+        blocked.add(vertex);
+
+        for (V successor : scg.successors(vertex)) {
+            int successorIndex = toI(successor);
+            if (successorIndex == startIndex) {
+                List<V> cycle = new ArrayList<>(stack.size());
+                stack.descendingIterator().forEachRemaining(cycle::add);
+                cycleConsumer.accept(cycle);
+                foundCycle = true;
+            } else if (!blocked.contains(successor)) {
+                boolean gotCycle = findCyclesInSCG(startIndex, successorIndex, scg);
+                foundCycle = foundCycle || gotCycle;
+            }
+        }
+        if (foundCycle) {
+            unblock(vertex);
+        } else {
+            for (V w : scg.successors(vertex)) {
+                Set<V> bSet = getBSet(w);
+                bSet.add(vertex);
+            }
+        }
+        stack.pop();
+        return foundCycle;
+    }
+
+    private void unblock(V vertex)
+    {
+        blocked.remove(vertex);
+        Set<V> bSet = getBSet(vertex);
+        while (bSet.size() > 0) {
+            V w = bSet.iterator().next();
+            bSet.remove(w);
+            if (blocked.contains(w)) {
+                unblock(w);
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void initState(Consumer<List<V>> consumer)
+    {
+        cycleConsumer = consumer;
+        iToV = (V[]) graph.nodes().toArray();
+        vToI = new HashMap<>();
+        blocked = new HashSet<>();
+        bSets = new HashMap<>();
+        stack = new ArrayDeque<>();
+
+        for (int i = 0; i < iToV.length; i++) {
+            vToI.put(iToV[i], i);
+        }
+    }
+
+    private void clearState()
+    {
+        cycleConsumer = null;
+        iToV = null;
+        vToI = null;
+        blocked = null;
+        bSets = null;
+        stack = null;
+    }
+
+    private void initMinSCGState()
+    {
+        index = 0;
+        foundSCCs = new ArrayList<>();
+        vIndex = new HashMap<>();
+        vLowlink = new HashMap<>();
+        path = new ArrayDeque<>();
+        pathSet = new HashSet<>();
+    }
+
+    private void clearMinSCCState()
+    {
+        index = 0;
+        foundSCCs = null;
+        vIndex = null;
+        vLowlink = null;
+        path = null;
+        pathSet = null;
+    }
+
+    private Integer toI(V vertex)
+    {
+        return vToI.get(vertex);
+    }
+
+    private V toV(Integer i)
+    {
+        return iToV[i];
+    }
+
+    private Set<V> getBSet(V v)
+    {
+        // B sets typically not all needed,
+        // so instantiate lazily.
+        return bSets.computeIfAbsent(v, k -> new HashSet<>());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/LegacyPluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/LegacyPluginLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..b38b4cf226181afd750da3f3a843061c76d0bf1e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/LegacyPluginLoadingStrategy.java
@@ -0,0 +1,253 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.GraphDependencyContext;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.ProviderLoader;
+import org.bukkit.plugin.UnknownDependencyException;
+
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class LegacyPluginLoadingStrategy<T> implements ProviderLoadingStrategy<T> {
+
+    private static final Logger LOGGER = Logger.getLogger("LegacyPluginLoadingStrategy");
+
+    private final ProviderLoader<T> onLoad;
+
+    public LegacyPluginLoadingStrategy(ProviderLoader<T> onLoad) {
+        this.onLoad = onLoad;
+    }
+
+    @Override
+    public List<T> loadProviders(List<PluginProvider<T>> providers) {
+        List<T> javapluginsLoaded = new ArrayList<>();
+        MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+        GraphDependencyContext dependencyContext = new GraphDependencyContext(dependencyGraph);
+
+        Map<String, PluginProvider<T>> providersToLoad = new HashMap<>();
+        Set<String> loadedPlugins = new HashSet<>();
+        Map<String, String> pluginsProvided = new HashMap<>();
+        Map<String, Collection<String>> dependencies = new HashMap<>();
+        Map<String, Collection<String>> softDependencies = new HashMap<>();
+
+        for (PluginProvider<T> provider : providers) {
+            PluginConfiguration configuration = provider.getConfiguration();
+
+            PluginProvider<T> replacedProvider = providersToLoad.put(configuration.getIdentifier(), provider);
+            if (replacedProvider != null) {
+                LOGGER.severe(String.format(
+                    "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
+                    configuration.getIdentifier(),
+                    provider.getSource(),
+                    replacedProvider.getSource(),
+                    replacedProvider.getParentSource()
+                ));
+            }
+
+            String removedProvided = pluginsProvided.remove(configuration.getIdentifier());
+            if (removedProvided != null) {
+                LOGGER.warning(String.format(
+                    "Ambiguous plugin name `%s'. It is also provided by `%s'",
+                    configuration.getIdentifier(),
+                    removedProvided
+                ));
+            }
+
+            for (String provided : configuration.getProvides()) {
+                PluginProvider<T> pluginProvider = providersToLoad.get(provided);
+
+                if (pluginProvider != null) {
+                    LOGGER.warning(String.format(
+                        "`%s provides `%s' while this is also the name of `%s' in `%s'",
+                        provider.getSource(),
+                        provided,
+                        pluginProvider.getSource(),
+                        provider.getParentSource()
+                    ));
+                } else {
+                    String replacedPlugin = pluginsProvided.put(provided, configuration.getIdentifier());
+                    if (replacedPlugin != null) {
+                        LOGGER.warning(String.format(
+                            "`%s' is provided by both `%s' and `%s'",
+                            provided,
+                            configuration.getIdentifier(),
+                            replacedPlugin
+                        ));
+                    }
+                }
+            }
+
+            Collection<String> softDependencySet = configuration.getSoftDependencies();
+            if (softDependencySet != null && !softDependencySet.isEmpty()) {
+                if (softDependencies.containsKey(configuration.getIdentifier())) {
+                    // Duplicates do not matter, they will be removed together if applicable
+                    softDependencies.get(configuration.getIdentifier()).addAll(softDependencySet);
+                } else {
+                    softDependencies.put(configuration.getIdentifier(), new LinkedList<String>(softDependencySet));
+                }
+
+                for (String depend : softDependencySet) {
+                    dependencyGraph.putEdge(configuration.getIdentifier(), depend);
+                }
+            }
+
+            Collection<String> dependencySet = configuration.getHardDependencies();
+            if (dependencySet != null && !dependencySet.isEmpty()) {
+                dependencies.put(configuration.getIdentifier(), new LinkedList<String>(dependencySet));
+
+                for (String depend : dependencySet) {
+                    dependencyGraph.putEdge(configuration.getIdentifier(), depend);
+                }
+            }
+
+            Collection<String> loadBeforeSet = configuration.getLoadBefore();
+            if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {
+                for (String loadBeforeTarget : loadBeforeSet) {
+                    if (softDependencies.containsKey(loadBeforeTarget)) {
+                        softDependencies.get(loadBeforeTarget).add(configuration.getIdentifier());
+                    } else {
+                        // softDependencies is never iterated, so 'ghost' plugins aren't an issue
+                        Collection<String> shortSoftDependency = new LinkedList<String>();
+                        shortSoftDependency.add(configuration.getIdentifier());
+                        softDependencies.put(loadBeforeTarget, shortSoftDependency);
+                    }
+
+                    dependencyGraph.putEdge(loadBeforeTarget, configuration.getIdentifier());
+                }
+            }
+        }
+
+        while (!providersToLoad.isEmpty()) {
+            boolean missingDependency = true;
+            Iterator<Map.Entry<String, PluginProvider<T>>> providerIterator = providersToLoad.entrySet().iterator();
+
+            while (providerIterator.hasNext()) {
+                Map.Entry<String, PluginProvider<T>> entry = providerIterator.next();
+                String providerIdentifier = entry.getKey();
+
+                if (dependencies.containsKey(providerIdentifier)) {
+                    Iterator<String> dependencyIterator = dependencies.get(providerIdentifier).iterator();
+                    final Set<String> missingHardDependencies = new HashSet<>(dependencies.get(providerIdentifier).size()); // Paper - list all missing hard depends
+
+                    while (dependencyIterator.hasNext()) {
+                        String dependency = dependencyIterator.next();
+
+                        // Dependency loaded
+                        if (loadedPlugins.contains(dependency)) {
+                            dependencyIterator.remove();
+
+                            // We have a dependency not found
+                        } else if (!providersToLoad.containsKey(dependency) && !pluginsProvided.containsKey(dependency)) {
+                            // Paper start
+                            missingHardDependencies.add(dependency);
+                        }
+                    }
+                    if (!missingHardDependencies.isEmpty()) {
+                        // Paper end
+                        missingDependency = false;
+                        providerIterator.remove();
+                        pluginsProvided.values().removeIf(s -> s.equals(providerIdentifier)); // Paper - remove provided plugins
+                        softDependencies.remove(providerIdentifier);
+                        dependencies.remove(providerIdentifier);
+
+                        LOGGER.log(
+                            Level.SEVERE,
+                            "Could not load '" + entry.getValue().getSource() + "' in folder '" + entry.getValue().getParentSource() + "'", // Paper
+                            new UnknownDependencyException(missingHardDependencies, providerIdentifier)); // Paper
+                    }
+
+                    if (dependencies.containsKey(providerIdentifier) && dependencies.get(providerIdentifier).isEmpty()) {
+                        dependencies.remove(providerIdentifier);
+                    }
+                }
+                if (softDependencies.containsKey(providerIdentifier)) {
+                    Iterator<String> softDependencyIterator = softDependencies.get(providerIdentifier).iterator();
+
+                    while (softDependencyIterator.hasNext()) {
+                        String softDependency = softDependencyIterator.next();
+
+                        // Soft depend is no longer around
+                        if (!providersToLoad.containsKey(softDependency) && !pluginsProvided.containsKey(softDependency)) {
+                            softDependencyIterator.remove();
+                        }
+                    }
+
+                    if (softDependencies.get(providerIdentifier).isEmpty()) {
+                        softDependencies.remove(providerIdentifier);
+                    }
+                }
+                if (!(dependencies.containsKey(providerIdentifier) || softDependencies.containsKey(providerIdentifier)) && providersToLoad.containsKey(providerIdentifier)) {
+                    // We're clear to load, no more soft or hard dependencies left
+                    PluginProvider<T> file = providersToLoad.get(providerIdentifier);
+                    providerIterator.remove();
+                    pluginsProvided.values().removeIf(s -> s.equals(providerIdentifier)); // Paper - remove provided plugins
+                    missingDependency = false;
+
+                    try {
+                        this.onLoad.applyContext(file, dependencyContext);
+                        T loadedPlugin = file.createInstance();
+
+                        if (this.onLoad.load(file, loadedPlugin)) {
+                            loadedPlugins.add(file.getConfiguration().getIdentifier());
+                            loadedPlugins.addAll(file.getConfiguration().getProvides());
+                            javapluginsLoaded.add(loadedPlugin);
+                        }
+
+                    } catch (Exception ex) {
+                        LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "'", ex); // Paper
+                    }
+                }
+            }
+
+            if (missingDependency) {
+                // We now iterate over plugins until something loads
+                // This loop will ignore soft dependencies
+                providerIterator = providersToLoad.entrySet().iterator();
+
+                while (providerIterator.hasNext()) {
+                    Map.Entry<String, PluginProvider<T>> entry = providerIterator.next();
+                    String plugin = entry.getKey();
+
+                    if (!dependencies.containsKey(plugin)) {
+                        softDependencies.remove(plugin);
+                        missingDependency = false;
+                        PluginProvider<T> file = entry.getValue();
+                        providerIterator.remove();
+
+                        try {
+                            this.onLoad.applyContext(file, dependencyContext);
+                            T loadedPlugin = file.createInstance();
+
+                            if (this.onLoad.load(file, loadedPlugin)) {
+                                loadedPlugins.add(file.getConfiguration().getIdentifier());
+                                loadedPlugins.addAll(file.getConfiguration().getProvides());
+                                javapluginsLoaded.add(loadedPlugin);
+                            }
+                            break;
+                        } catch (Exception ex) {
+                            LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "'", ex); // Paper
+                        }
+                    }
+                }
+                // We have no plugins left without a depend
+                if (missingDependency) {
+                    softDependencies.clear();
+                    dependencies.clear();
+                    Iterator<PluginProvider<T>> failedPluginIterator = providersToLoad.values().iterator();
+
+                    while (failedPluginIterator.hasNext()) {
+                        PluginProvider<T> file = failedPluginIterator.next();
+                        failedPluginIterator.remove();
+                        LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "': circular dependency detected"); // Paper
+                    }
+                }
+            }
+        }
+
+        return javapluginsLoaded;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ModernPluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ModernPluginLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..b1ff64e018c77c5f5de1a4700176d9b626fbee65
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ModernPluginLoadingStrategy.java
@@ -0,0 +1,136 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import com.google.common.collect.Lists;
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.GraphDependencyContext;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.ProviderLoader;
+import org.bukkit.plugin.UnknownDependencyException;
+
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ModernPluginLoadingStrategy<T> implements ProviderLoadingStrategy<T> {
+
+    private static final Logger LOGGER = Logger.getLogger("ModernPluginLoadingStrategy");
+
+    private final ProviderLoader<T> onLoad;
+
+    public ModernPluginLoadingStrategy(ProviderLoader<T> onLoad) {
+        this.onLoad = onLoad;
+    }
+
+    @Override
+    public List<T> loadProviders(List<PluginProvider<T>> pluginProviders) {
+        // Dependency validation
+        List<PluginProvider<T>> validatedProviders = new ArrayList<>();
+        Map<String, PluginProvider<T>> providerMap = new HashMap<>();
+        {
+            // Populate dependency set
+            for (PluginProvider<T> provider : pluginProviders) {
+                PluginConfiguration providerConfig = provider.getConfiguration();
+
+                // Populate provided into a map
+                PluginProvider<T> replacedProvider = providerMap.put(providerConfig.getIdentifier(), provider);
+                if (replacedProvider != null) {
+                    LOGGER.severe(String.format(
+                        "Ambiguous plugin name '%s' for files '%s' and '%s' in '%s'",
+                        providerConfig.getIdentifier(),
+                        provider.getSource(),
+                        replacedProvider.getSource(),
+                        replacedProvider.getParentSource()
+                    ));
+                }
+
+                for (String provides : providerConfig.getProvides()) {
+                    PluginProvider<T> removedProvided = providerMap.put(provides, provider);
+                    if (removedProvided != null) {
+                        LOGGER.warning(
+                            "Ambiguous plugin name '%s'. It is also provided by '%s'".formatted(providerConfig.getIdentifier(), removedProvided)
+                        );
+                    }
+
+                }
+            }
+
+            // Validate
+            for (PluginProvider<T> provider : pluginProviders) {
+                PluginConfiguration providerConfiguration = provider.getConfiguration();
+
+                // Populate missing dependencies to capture if there are multiple missing ones.
+                List<String> missingDependencies = new ArrayList<>();
+                for (String hardDependency : providerConfiguration.getHardDependencies()) {
+                    if (!providerMap.containsKey(hardDependency)) {
+                        missingDependencies.add(hardDependency);
+                    }
+                }
+
+                if (missingDependencies.isEmpty()) {
+                    validatedProviders.add(provider);
+                } else {
+                    LOGGER.log(
+                        Level.SEVERE,
+                        "Could not load '%s' in '%s'".formatted(provider.getSource(), provider.getParentSource()),
+                        new UnknownDependencyException(missingDependencies, providerConfiguration.getIdentifier())); // Paper
+                }
+            }
+        }
+
+        MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+        GraphDependencyContext graphDependencyContext = new GraphDependencyContext(dependencyGraph);
+        // Build dependency graph
+        // Build the dependencies inorder to generate a load order by topographically sorting the populated graph
+        for (PluginProvider<?> provider : validatedProviders) {
+            PluginConfiguration configuration = provider.getConfiguration();
+            String dependencyIdentifier = configuration.getIdentifier();
+
+            for (String dependency : configuration.getHardDependencies()) {
+                dependencyGraph.putEdge(dependencyIdentifier, dependency);
+            }
+
+            for (String loadBeforeTarget : configuration.getLoadBefore()) {
+                dependencyGraph.putEdge(loadBeforeTarget, dependencyIdentifier);
+            }
+
+            for (String dependency : configuration.getSoftDependencies()) {
+                dependencyGraph.putEdge(dependencyIdentifier, dependency);
+            }
+
+            dependencyGraph.addNode(dependencyIdentifier); // Make sure dependencies at least have a node
+        }
+
+        // Reverse the topographic search to let us see which providers we can load first.
+        List<String> reversedTopographicSort;
+        try {
+            reversedTopographicSort = Lists.reverse(TopographicGraphSorter.sortGraph(dependencyGraph));
+        } catch (GraphCycleException e) {
+            throw new PluginGraphCycleException(new JohnsonSimpleCycles<>(dependencyGraph).findSimpleCycles());
+        }
+
+        List<T> loadedPlugins = new ArrayList<>();
+        for (String providerIdentifier : reversedTopographicSort) {
+            // It's possible that this will be null because the above dependencies for soft/load before aren't validated if they exist.
+            // The graph could be MutableGraph<PluginProvider<T>>, but we would have to check if each dependency exists there... just
+            // nicer to do it here TBH.
+            PluginProvider<T> retrievedProvider = providerMap.get(providerIdentifier);
+            if (retrievedProvider == null) {
+                continue; // Skip provider that doesn't exist....
+            }
+
+            this.onLoad.applyContext(retrievedProvider, graphDependencyContext);
+            try {
+                T instance = retrievedProvider.createInstance();
+                if (this.onLoad.load(retrievedProvider, instance)) {
+                    loadedPlugins.add(instance);
+                }
+            } catch (Exception ex) {
+                LOGGER.log(Level.SEVERE, "Could not load plugin '%s' in folder '%s'".formatted(retrievedProvider.getFileName(), retrievedProvider.getParentSource()), ex); // Paper
+            }
+        }
+
+        return loadedPlugins;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/PluginGraphCycleException.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/PluginGraphCycleException.java
new file mode 100644
index 0000000000000000000000000000000000000000..05eb118f102d6c9a1b20d30bd4c41b6c7d10a264
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/PluginGraphCycleException.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import java.util.List;
+
+public class PluginGraphCycleException extends RuntimeException {
+    private final List<List<String>> cycles;
+
+    public PluginGraphCycleException(List<List<String>> cycles) {
+        this.cycles = cycles;
+    }
+
+    public List<List<String>> getCycles() {
+        return this.cycles;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/PluginLoadingStrategies.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/PluginLoadingStrategies.java
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ProviderLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ProviderLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c2453957177688d26ddbf2ff36e3de4ac277ba1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/ProviderLoadingStrategy.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+import java.util.List;
+
+public interface ProviderLoadingStrategy<P> {
+
+    List<P> loadProviders(List<PluginProvider<P>> providers);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/TopographicGraphSorter.java b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/TopographicGraphSorter.java
new file mode 100644
index 0000000000000000000000000000000000000000..6e0b75c3fad30d53acda8f410e7832be05694799
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/entrypoint/storage/ordered/strategy/TopographicGraphSorter.java
@@ -0,0 +1,52 @@
+package io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy;
+
+import com.google.common.graph.Graph;
+
+import java.util.*;
+
+public class TopographicGraphSorter {
+
+    // Topographically sort dependencies
+    public static <N> List<N> sortGraph(Graph<N> graph) throws PluginGraphCycleException {
+        List<N> sorted = new ArrayList<>();
+        Deque<N> roots = new ArrayDeque<>();
+        Map<N, Integer> nonRoots = new HashMap<>();
+
+        for (N node : graph.nodes()) {
+            // Is a node being referred to by any other nodes?
+            int degree = graph.inDegree(node);
+            if (degree == 0) {
+                // Is a root
+                roots.add(node);
+            } else {
+                // Isn't a root, the number represents how many nodes connect to it.
+                nonRoots.put(node, degree);
+            }
+        }
+
+        // Pick from nodes that aren't referred to anywhere else
+        while (!roots.isEmpty()) {
+            N next = roots.remove();
+
+            for (N successor : graph.successors(next)) {
+                // Traverse through, moving down a degree
+                int newInDegree = nonRoots.get(successor) - 1;
+
+                if (newInDegree == 0) {
+                    nonRoots.remove(successor);
+                    roots.add(successor);
+                } else {
+                    nonRoots.put(successor, newInDegree);
+                }
+
+            }
+            sorted.add(next);
+        }
+
+        if (!nonRoots.isEmpty()) {
+            throw new GraphCycleException();
+        }
+
+        return sorted;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..50c8ae5dfccdd7698a1454034259d6226e82bf7f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.provider.source;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+
+public interface ProviderSource<C> {
+
+    void registerProviders(EntrypointHandler entrypointHandler, C context) throws Throwable;
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java b/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java
new file mode 100644
index 0000000000000000000000000000000000000000..cec2a03a0354c9237508920e1d3f4f8b16d4ddce
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.plugin.provider.source;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.ServerEntryPointHandler;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+/*
+A simple class for handling the registration of plugin providers.
+ */
+public class Providers {
+
+    public static final Providers INSTANCE = new Providers();
+    private static final Logger LOGGER = Logger.getLogger("PluginLoading"); // Name for easier understanding
+
+    public <C> void addProviders(ProviderSource<C> source, C context) {
+        try {
+            source.registerProviders(ServerEntryPointHandler.INSTANCE, context);
+        } catch (Throwable e) {
+            LOGGER.log(Level.SEVERE, e.getMessage(), e);
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..b07379af27b53cd9ab0e9db1e444d2dd64057dda
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class DirectoryProviderSource implements ProviderSource<Path> {
+
+    public static final DirectoryProviderSource INSTANCE = new DirectoryProviderSource();
+    private static final Logger LOGGER = Logger.getLogger("DirectoryProviderSource");
+    private final FileProviderSource providerSource = new FileProviderSource(false);
+
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
+        // Sym link happy, create file if missing.
+        if (!Files.isDirectory(context)) {
+            Files.createDirectories(context);
+        }
+
+        Files.walk(context, 1).filter(Files::isRegularFile).forEach((path) -> {
+            try {
+                this.providerSource.registerProviders(entrypointHandler, path);
+            } catch (IllegalArgumentException ignored) {
+                // Ignore initial argument exceptions
+            } catch (Exception e) {
+                LOGGER.log(Level.SEVERE, "Error loading plugin: " + e.getMessage(), e);
+            }
+        });
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..02b98fd9895cce0cd68113937c3c0d9d4457640d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java
@@ -0,0 +1,48 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+import io.papermc.paper.plugin.provider.type.PluginFileType;
+
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+
+public class FileProviderSource implements ProviderSource<Path> {
+
+    private final boolean addPluginProvider;
+
+    public FileProviderSource(boolean addPluginProvider) {
+        this.addPluginProvider = addPluginProvider;
+    }
+
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
+        String source = this.addPluginProvider ? "File '%s' specified through 'add-plugin' argument" : "File '%s'";
+        source = source.formatted(context);
+
+        if (Files.notExists(context)) {
+            throw new IllegalArgumentException(source + " does not exist, cannot load a plugin from it!");
+        }
+
+        if (!Files.isRegularFile(context)) {
+            throw new IllegalArgumentException(source + " is not a file, cannot load a plugin from it!");
+        }
+
+        if (!context.getFileName().toString().endsWith(".jar")) {
+            throw new IllegalArgumentException(source + " is not a jar file, cannot load a plugin from it!");
+        }
+
+        try {
+            JarFile file = new JarFile(context.toFile());
+            PluginFileType<?> type = PluginFileType.guessType(file);
+            if (type == null) {
+                throw new IllegalArgumentException(source + " is not a valid plugin file, cannot load a plugin from it!");
+            }
+
+            type.register(entrypointHandler, file, context);
+        } catch (Exception exception) {
+            throw new RuntimeException(source + " failed to load!", exception);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc95f3e850b23b70e04f2fe8138868ce018dcd2e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+
+import java.io.File;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class PluginFlagProviderSource implements ProviderSource<List<File>> {
+
+    public static final PluginFlagProviderSource INSTANCE = new PluginFlagProviderSource();
+    private static final Logger LOGGER = Logger.getLogger("PluginFlagProviderSource");
+    private final FileProviderSource providerSource = new FileProviderSource(true);
+
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, List<File> context) throws Throwable {
+        for (File file : context) {
+            try {
+                this.providerSource.registerProviders(entrypointHandler, file.toPath());
+            } catch (Exception e) {
+                LOGGER.log(Level.SEVERE, "Error loading plugin: " + e.getMessage(), e);
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7b16e25a140e51ef4dfbba3d036acf68dfb88b5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+
+public abstract class JavaPluginProvider implements PluginProvider<JavaPlugin> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java b/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java
new file mode 100644
index 0000000000000000000000000000000000000000..069fcbe0ab83f6fbb04c752344a5b6377baded44
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java
@@ -0,0 +1,68 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.provider.service.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.provider.type.paper.PaperParentProvider;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginProvider;
+import io.papermc.paper.plugin.provider.type.spigot.SpigotPluginProvider;
+import org.jetbrains.annotations.Nullable;
+
+import java.nio.file.Path;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+public abstract class PluginFileType<T extends PluginProvider<?>> {
+
+    public static final PluginFileType<PaperParentProvider> PAPER = new PluginFileType<>("paper-plugin.yml", PaperParentProvider.FACTORY) {
+        @Override
+        protected void register(EntrypointHandler entrypointHandler, PaperParentProvider provider) {
+            PaperPluginProvider parent = provider.createInstance();
+            if (parent.shouldCreateBootstrap()) {
+                PaperPluginProvider.PaperBootstrapProvider bootstrapPluginProvider = parent.createBootstrapProvider();
+
+                entrypointHandler.register(Entrypoint.BOOTSTRAPPER, bootstrapPluginProvider);
+                entrypointHandler.register(Entrypoint.PLUGIN, parent.createPluginProvider(bootstrapPluginProvider));
+            } else {
+                entrypointHandler.register(Entrypoint.PLUGIN, parent.createPluginProvider());
+            }
+        }
+    };
+    public static final PluginFileType<SpigotPluginProvider> SPIGOT = new PluginFileType<>("plugin.yml", SpigotPluginProvider.FACTORY) {
+        @Override
+        protected void register(EntrypointHandler entrypointHandler, SpigotPluginProvider provider) {
+            entrypointHandler.register(Entrypoint.PLUGIN, provider);
+        }
+    };
+
+    private static final List<PluginFileType<?>> VALUES = List.of(PAPER, SPIGOT);
+
+    private final String config;
+    private final PluginProviderFactory<T> factory;
+
+    PluginFileType(String config, PluginProviderFactory<T> factory) {
+        this.config = config;
+        this.factory = factory;
+    }
+
+    @Nullable
+    public static PluginFileType<?> guessType(JarFile file) {
+        for (PluginFileType<?> type : VALUES) {
+            JarEntry entry = file.getJarEntry(type.config);
+            if (entry != null) {
+                return type;
+            }
+        }
+
+        return null;
+    }
+
+    public T register(EntrypointHandler entrypointHandler, JarFile file, Path context) throws Exception {
+        T provider = this.factory.build(file, file.getJarEntry(this.config), context);
+        this.register(entrypointHandler, provider);
+        return provider;
+    }
+
+    protected abstract void register(EntrypointHandler entrypointHandler, T provider);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab31b1c635f91c51b4740492817e43878b2413cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+import java.nio.file.Path;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+public interface PluginProviderFactory<T extends PluginProvider<?>> {
+
+    T build(JarFile file, JarEntry config, Path source) throws Exception;
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperParentProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperParentProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..9f10323220ea3147f7bfd006b7ce6879b74d3174
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperParentProvider.java
@@ -0,0 +1,74 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import com.destroystokyo.paper.utils.PaperPluginLogger;
+import io.papermc.paper.plugin.loader.PaperClasspathBuilder;
+import io.papermc.paper.plugin.loader.PluginLoader;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.service.classloader.PaperSimplePluginClassLoader;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import io.papermc.paper.plugin.provider.util.ProviderUtil;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class PaperParentProvider implements PluginProvider<PaperPluginProvider> {
+
+    public static final PluginProviderFactory<PaperParentProvider> FACTORY = new PaperPluginProviderFactory();
+
+    private final Path path;
+    private final PaperPluginConfiguration description;
+    private final JarFile jarFile;
+
+    private final Logger logger;
+
+    PaperParentProvider(Path path, JarFile file, PaperPluginConfiguration configuration) throws IOException {
+        this.path = path;
+        this.jarFile = file;
+        this.description = configuration;
+        this.logger = PaperPluginLogger.getLogger(configuration);
+    }
+
+    @Override
+    public @NotNull Path getSource() {
+        return this.path;
+    }
+
+    @Override
+    public JarFile file() {
+        return this.jarFile;
+    }
+
+    @Override
+    public PaperPluginProvider createInstance() {
+        PaperClasspathBuilder builder = new PaperClasspathBuilder();
+
+        if (this.description.getLoader() != null) {
+            try (
+                PaperSimplePluginClassLoader simplePluginClassLoader = new PaperSimplePluginClassLoader(this.path, this.jarFile, this.description, this.getClass().getClassLoader())
+            ) {
+                PluginLoader loader = ProviderUtil.loadClass(this.description.getLoader(), PluginLoader.class, simplePluginClassLoader);
+                loader.classloader(builder);
+
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        return new PaperPluginProvider(this.path, this.jarFile, this.description, builder.buildClassLoader(this), this.logger);
+    }
+
+    @Override
+    public PaperPluginConfiguration getConfiguration() {
+        return this.description;
+    }
+
+    @Override
+    public Logger getLogger() {
+        return this.logger;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..cec566ba2fdba57a24c2ad245107a8d14da7f9e0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java
@@ -0,0 +1,195 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.DependencyContextHolder;
+import io.papermc.paper.plugin.bootstrap.PluginBootstrap;
+import io.papermc.paper.plugin.bootstrap.PluginBootstrapContextImpl;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoader;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import io.papermc.paper.plugin.provider.util.ProviderUtil;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class PaperPluginProvider {
+
+    private final Path path;
+    private final JarFile jarFile;
+
+    private final PaperPluginConfiguration description;
+    private final PaperPluginClassLoader classLoader;
+
+    private final Logger logger;
+
+    public PaperPluginProvider(Path path, JarFile jarFile, PaperPluginConfiguration description, PaperPluginClassLoader classLoader, Logger logger) {
+        this.path = path;
+        this.jarFile = jarFile;
+        this.description = description;
+        this.classLoader = classLoader;
+        this.logger = logger;
+    }
+
+    public boolean shouldCreateBootstrap() {
+        return this.description.getBootstrapper() != null;
+    }
+
+    public PaperBootstrapProvider createBootstrapProvider() {
+        return new PaperBootstrapProvider();
+    }
+
+    public PaperServerPluginProvider createPluginProvider() {
+        return new PaperServerPluginProvider(null);
+    }
+
+    public PaperServerPluginProvider createPluginProvider(PaperBootstrapProvider provider) {
+        return new PaperServerPluginProvider(provider);
+    }
+
+    public class PaperBootstrapProvider implements PluginProvider<PluginBootstrap>, ProviderStatusHolder, DependencyContextHolder {
+
+        private ProviderStatus status;
+        private PluginBootstrap lastProvided;
+
+        @Override
+        public @NotNull Path getSource() {
+            return PaperPluginProvider.this.path;
+        }
+
+        @Override
+        public JarFile file() {
+            return PaperPluginProvider.this.jarFile;
+        }
+
+        @Override
+        public PluginBootstrap createInstance() {
+            PluginBootstrap bootstrap = ProviderUtil.loadClass(PaperPluginProvider.this.description.getBootstrapper(),
+                PluginBootstrap.class, PaperPluginProvider.this.classLoader, () -> this.status = ProviderStatus.ERRORED);
+            this.status = ProviderStatus.INITIALIZED;
+            this.lastProvided = bootstrap;
+            return bootstrap;
+        }
+
+        @Override
+        public PaperPluginConfiguration getConfiguration() {
+            return PaperPluginProvider.this.description;
+        }
+
+        @Override
+        public Logger getLogger() {
+            return PaperPluginProvider.this.logger;
+        }
+
+        @Override
+        public ProviderStatus getLastProvidedStatus() {
+            return this.status;
+        }
+
+        @Override
+        public void setStatus(ProviderStatus status) {
+            this.status = status;
+        }
+
+        public PluginBootstrap getLastProvided() {
+            return this.lastProvided;
+        }
+
+        @Override
+        public void setContext(DependencyContext context) {
+            PaperPluginProvider.this.classLoader.setContext(context);
+        }
+    }
+
+    public class PaperServerPluginProvider extends JavaPluginProvider implements ProviderStatusHolder, DependencyContextHolder {
+
+        private final PaperBootstrapProvider bootstrapProvider;
+
+        private ProviderStatus status;
+
+        PaperServerPluginProvider(PaperBootstrapProvider bootstrapProvider) {
+            this.bootstrapProvider = bootstrapProvider;
+        }
+
+        @Override
+        public @NotNull Path getSource() {
+            return PaperPluginProvider.this.path;
+        }
+
+        @Override
+        public JarFile file() {
+            return PaperPluginProvider.this.jarFile;
+        }
+
+        @Override
+        public JavaPlugin createInstance() {
+            PluginBootstrap bootstrap = null;
+            if (this.bootstrapProvider != null && this.bootstrapProvider.getLastProvided() != null) {
+                bootstrap = this.bootstrapProvider.getLastProvided();
+            }
+
+            try {
+                JavaPlugin plugin;
+                if (bootstrap == null) {
+                    plugin = ProviderUtil.loadClass(PaperPluginProvider.this.description.getMain(), JavaPlugin.class, PaperPluginProvider.this.classLoader);
+                } else {
+                    plugin = bootstrap.createPlugin(PluginBootstrapContextImpl.of(this, Bukkit.getPluginsFolder().toPath()));
+                }
+
+                // Don't allow plugins to load plugins other than the one defined in main. This restriction might not be necessary.
+                if (!plugin.getClass().isAssignableFrom(Class.forName(PaperPluginProvider.this.description.getMain(), true, plugin.getClass().getClassLoader()))) {
+                    throw new IllegalArgumentException("Plugin provided must be the same type as main defined in plugin configuration!");
+                }
+
+                this.status = ProviderStatus.INITIALIZED;
+                return plugin;
+            } catch (Throwable throwable) {
+                this.status = ProviderStatus.ERRORED;
+                SneakyThrow.sneaky(throwable);
+            }
+
+            throw new AssertionError(); // Impossible
+        }
+
+        @Override
+        public PaperPluginConfiguration getConfiguration() {
+            return PaperPluginProvider.this.description;
+        }
+
+        @Override
+        public Logger getLogger() {
+            return PaperPluginProvider.this.logger;
+        }
+
+        @Override
+        public ProviderStatus getLastProvidedStatus() {
+            return this.status;
+        }
+
+        @Override
+        public void setStatus(ProviderStatus status) {
+            this.status = status;
+        }
+
+        public boolean shouldSkipCreation() {
+            if (this.bootstrapProvider == null) {
+                return false;
+            }
+
+            return this.bootstrapProvider.getLastProvidedStatus() == ProviderStatus.ERRORED;
+        }
+
+        @Override
+        public void setContext(DependencyContext context) {
+            PaperPluginProvider.this.classLoader.setContext(context);
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d4c05ede5667735f316666eef1680525502163f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.nio.file.Path;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+class PaperPluginProviderFactory implements PluginProviderFactory<PaperParentProvider> {
+
+    @Override
+    public PaperParentProvider build(JarFile file, JarEntry config, Path source) throws Exception {
+        PaperPluginConfiguration configuration;
+        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(file.getInputStream(config)))) {
+            configuration = PaperPluginConfiguration.create(bufferedReader);
+        }
+
+        return new PaperParentProvider(source, file, configuration);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..7053d472711344851b729b7a249823ac0cf75881
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java
@@ -0,0 +1,163 @@
+package io.papermc.paper.plugin.provider.type.spigot;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import com.destroystokyo.paper.utils.PaperPluginLogger;
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.DependencyContextHolder;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.UnknownDependencyException;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.plugin.java.LibraryLoader;
+import org.bukkit.plugin.java.PluginClassLoader;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.nio.file.Path;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.jar.JarFile;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class SpigotPluginProvider extends JavaPluginProvider implements ProviderStatusHolder, DependencyContextHolder {
+
+    public static final PluginProviderFactory<SpigotPluginProvider> FACTORY = new SpigotPluginProviderFactory();
+    private static final LibraryLoader LIBRARY_LOADER = new LibraryLoader(Logger.getLogger("SpigotLibraryLoader"));
+    private final Path path;
+    private final PluginDescriptionFile description;
+    private final JarFile jarFile;
+    private final Logger logger;
+    private ProviderStatus status;
+    private DependencyContext dependencyContext;
+
+    SpigotPluginProvider(Path path, JarFile file, PluginDescriptionFile description) {
+        this.path = path;
+        this.jarFile = file;
+        this.description = description;
+        this.logger = PaperPluginLogger.getLogger(description);
+    }
+
+    @Override
+    public @NotNull Path getSource() {
+        return this.path;
+    }
+
+    @Override
+    public JarFile file() {
+        return this.jarFile;
+    }
+
+    @Override
+    public JavaPlugin createInstance() {
+        Server server = Bukkit.getServer();
+        try {
+
+            final File parentFile = server.getPluginsFolder(); // Paper
+            final File dataFolder = new File(parentFile, this.description.getName());
+            @SuppressWarnings("deprecation") final File oldDataFolder = new File(parentFile, this.description.getRawName());
+
+            // Found old data folder
+            if (dataFolder.equals(oldDataFolder)) {
+                // They are equal -- nothing needs to be done!
+            } else if (dataFolder.isDirectory() && oldDataFolder.isDirectory()) {
+                server.getLogger().warning(String.format(
+                    "While loading %s (%s) found old-data folder: `%s' next to the new one `%s'",
+                    this.description.getFullName(),
+                    this.path,
+                    oldDataFolder,
+                    dataFolder
+                ));
+            } else if (oldDataFolder.isDirectory() && !dataFolder.exists()) {
+                if (!oldDataFolder.renameTo(dataFolder)) {
+                    throw new InvalidPluginException("Unable to rename old data folder: `" + oldDataFolder + "' to: `" + dataFolder + "'");
+                }
+                server.getLogger().log(Level.INFO, String.format(
+                    "While loading %s (%s) renamed data folder: `%s' to `%s'",
+                    this.description.getFullName(),
+                    this.path,
+                    oldDataFolder,
+                    dataFolder
+                ));
+            }
+
+            if (dataFolder.exists() && !dataFolder.isDirectory()) {
+                throw new InvalidPluginException(String.format(
+                    "Projected datafolder: `%s' for %s (%s) exists and is not a directory",
+                    dataFolder,
+                    this.description.getFullName(),
+                    this.path
+                ));
+            }
+
+            Set<String> missingHardDependencies = new HashSet<>(this.description.getDepend().size()); // Paper - list all missing hard depends
+            for (final String pluginName : this.description.getDepend()) {
+                if (!this.dependencyContext.hasDependency(pluginName)) {
+                    missingHardDependencies.add(pluginName); // Paper - list all missing hard depends
+                }
+            }
+            // Paper start - list all missing hard depends
+            if (!missingHardDependencies.isEmpty()) {
+                throw new UnknownDependencyException(missingHardDependencies, this.description.getFullName());
+            }
+            // Paper end
+
+            server.getUnsafe().checkSupported(this.description);
+
+            final PluginClassLoader loader;
+            try {
+                loader = new PluginClassLoader(this.getClass().getClassLoader(), this.description, dataFolder, this.path.toFile(), LIBRARY_LOADER.createLoader(this.description)); // Paper
+            } catch (InvalidPluginException ex) {
+                throw ex;
+            } catch (Throwable ex) {
+                throw new InvalidPluginException(ex);
+            }
+
+            io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoaderStorage.INSTANCE.add(loader); // Paper
+
+            this.status = ProviderStatus.INITIALIZED;
+            return loader.plugin;
+        } catch (Throwable ex) {
+            this.status = ProviderStatus.ERRORED;
+            SneakyThrow.sneaky(ex);
+        }
+
+        throw new AssertionError(); // Shouldn't happen
+    }
+
+    @Override
+    public PluginDescriptionFile getConfiguration() {
+        return this.description;
+    }
+
+    @Override
+    public Logger getLogger() {
+        return this.logger;
+    }
+
+    @Override
+    public ProviderStatus getLastProvidedStatus() {
+        return this.status;
+    }
+
+    @Override
+    public void setStatus(ProviderStatus status) {
+        this.status = status;
+    }
+
+    public boolean isLegacy() {
+        return this.description.isLegacy();
+    }
+
+    @Override
+    public void setContext(DependencyContext context) {
+        this.dependencyContext = context;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..e856f7900026e508a1076c28ccace58acb461c23
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.plugin.provider.type.spigot;
+
+import io.papermc.paper.plugin.provider.configuration.serializer.constraints.PluginConfigConstraints;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.bukkit.plugin.InvalidDescriptionException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.yaml.snakeyaml.error.YAMLException;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Path;
+import java.util.Locale;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+class SpigotPluginProviderFactory implements PluginProviderFactory<SpigotPluginProvider> {
+
+    @Override
+    public SpigotPluginProvider build(JarFile file, JarEntry config, Path source) throws Exception {
+        PluginDescriptionFile descriptionFile;
+        try (InputStream inputStream = file.getInputStream(config)) {
+            descriptionFile = new PluginDescriptionFile(inputStream);
+        } catch (IOException | YAMLException ex) {
+            throw new InvalidDescriptionException(ex);
+        }
+
+        // Copied from SimplePluginManager#loadPlugins
+        // Spigot doesn't validate the name when the config is created, and instead when the plugin is loaded.
+        // Paper plugin configuration will do these checks in config serializer instead of when this is created.
+        String name = descriptionFile.getRawName();
+        if (PluginConfigConstraints.RESERVED_KEYS.contains(name.toLowerCase(Locale.ROOT))) {
+            throw new InvalidDescriptionException("Restricted name, cannot use %s as a plugin name.".formatted(name));
+        } else if (name.indexOf(' ') != -1) {
+            throw new InvalidDescriptionException("Restricted name, cannot use 0x20 (space character) in a plugin name.");
+        }
+
+        return new SpigotPluginProvider(source, file, descriptionFile);
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0a843e0afbcb1af8e2641515eb244b791b819b8c..5d563a8c9520a348b61b7122cead76aabf8d429f 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -64,6 +64,7 @@ import net.minecraft.SharedConstants;
 public class Main {

     private static final Logger LOGGER = LogUtils.getLogger();
+    public static Path pluginDirectory;

     public Main() {}

@@ -105,6 +106,18 @@ public class Main {
             }

             Bootstrap.bootStrap();
+            // Paper start
+            io.papermc.paper.plugin.provider.service.classloader.PaperClassloaderBytecodeModifier.init();
+            io.papermc.paper.plugin.provider.source.Providers provider = io.papermc.paper.plugin.provider.source.Providers.INSTANCE;
+            File pluginfile = (File) optionset.valueOf("plugins");
+            provider.addProviders(io.papermc.paper.plugin.provider.source.impl.DirectoryProviderSource.INSTANCE, pluginfile.toPath());
+
+            @SuppressWarnings("unchecked")
+            java.util.List<File> files = (java.util.List<File>) optionset.valuesOf("add-plugin");
+            provider.addProviders(io.papermc.paper.plugin.provider.source.impl.PluginFlagProviderSource.INSTANCE, files);
+            pluginDirectory = pluginfile.toPath();
+            io.papermc.paper.plugin.provider.service.entrypoint.ServerEntryPointHandler.INSTANCE.enter(io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint.BOOTSTRAPPER);
+            // Paper end
             Bootstrap.validate();
             Util.startTimerHackThread();
             Path path = Paths.get("server.properties");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a8cf1ab9d7504dfdb2310f1dca82324a225bea7d..d94cd7da7eee3954f443452a2f3e6cb8e2ba1bfb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -255,7 +255,8 @@ public final class CraftServer implements Server {
     private final CraftCommandMap commandMap = new CraftCommandMap(this);
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
-    private final SimplePluginManager pluginManager = new SimplePluginManager(this, this.commandMap);
+    private final SimplePluginManager pluginManager = new SimplePluginManager(this, commandMap);
+    public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager); {this.pluginManager.paperPluginManager = this.paperPluginManager;} // Paper
     private final StructureManager structureManager;
     protected final DedicatedServer console;
     protected final DedicatedPlayerList playerList;
@@ -357,7 +358,7 @@ public final class CraftServer implements Server {
         this.saveCommandsConfig();
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
-        this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
+        co.aikar.timings.Timings.setTimingsEnabled(this.configuration.getBoolean("settings.plugin-profiling")); // Paper
         this.overrideSpawnLimits();
         console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
@@ -409,29 +410,7 @@ public final class CraftServer implements Server {
     }

     public void loadPlugins() {
-        this.pluginManager.registerInterface(JavaPluginLoader.class);
-
-        File pluginFolder = this.getPluginsFolder(); // Paper
-
-        // Paper start
-        if (true || pluginFolder.exists()) {
-            if (!pluginFolder.exists()) {
-                pluginFolder.mkdirs();
-            }
-            Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder, this.extraPluginJars());
-            // Paper end
-            for (Plugin plugin : plugins) {
-                try {
-                    String message = String.format("Loading %s", plugin.getDescription().getFullName());
-                    plugin.getLogger().info(message);
-                    plugin.onLoad();
-                } catch (Throwable ex) {
-                    Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, ex.getMessage() + " initializing " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
-                }
-            }
-        } else {
-            pluginFolder.mkdir();
-        }
+        io.papermc.paper.plugin.provider.service.entrypoint.ServerEntryPointHandler.INSTANCE.enter(io.papermc.paper.plugin.provider.service.entrypoint.Entrypoint.PLUGIN); // Paper - replace implementation
     }

     // Paper start
@@ -550,15 +529,17 @@ public final class CraftServer implements Server {
     private void enablePlugin(Plugin plugin) {
         try {
             List<Permission> perms = plugin.getDescription().getPermissions();
-
+            List<Permission> permsToLoad = new ArrayList<>(); // Paper
             for (Permission perm : perms) {
-                try {
-                    this.pluginManager.addPermission(perm, false);
-                } catch (IllegalArgumentException ex) {
-                    this.getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription().getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered", ex);
+                // Paper start
+                if (this.paperPluginManager.getPermission(perm.getName()) == null) {
+                    permsToLoad.add(perm);
+                } else {
+                    this.getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription().getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered");
+                // Paper end
                 }
             }
-            this.pluginManager.dirtyPermissibles();
+            this.paperPluginManager.addPermissions(permsToLoad); // Paper

             this.pluginManager.enablePlugin(plugin);
         } catch (Throwable ex) {
@@ -2790,7 +2771,7 @@ public final class CraftServer implements Server {
 
     @Override
     public void reloadPermissions() {
-        pluginManager.clearPermissions();
+        this.pluginManager.clearPermissions();
         if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) loadCustomPermissions();
         for (Plugin plugin : pluginManager.getPlugins()) {
             for (Permission perm : plugin.getDescription().getPermissions()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 909b2c98e7a9117d2f737245e4661792ffafb744..2c1936d099f37152631cd8b7cf5f88b2f6db0a95 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.scheduler;
 
-
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -42,6 +41,12 @@ public class MinecraftInternalPlugin extends PluginBase {
     public PluginDescriptionFile getDescription() {
         return pdf;
     }
+    // Paper start
+    @Override
+    public io.papermc.paper.plugin.configuration.PluginConfiguration getConfiguration() {
+        return pdf;
+    }
+    // Paper end
 
     @Override
     public FileConfiguration getConfig() {
diff --git a/src/test/java/io/papermc/paper/plugin/DependencyLoadingTest.java b/src/test/java/io/papermc/paper/plugin/DependencyLoadingTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..9bfcf9d989a7bccd03d5496b23614aa8661f95d2
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/DependencyLoadingTest.java
@@ -0,0 +1,144 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.ProviderLoader;
+import io.papermc.paper.plugin.provider.service.entrypoint.storage.ordered.strategy.ModernPluginLoadingStrategy;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class DependencyLoadingTest {
+
+    private static List<PluginProvider<PaperTestPlugin>> REGISTERED_PROVIDERS = new ArrayList<>();
+    private static Map<String, Integer> LOAD_ORDER = new HashMap<>();
+
+    static {
+        setup();
+    }
+
+    private static TestJavaPluginProvider setup(String identifier, String[] hard, String[] soft, String[] before) {
+        TestPluginConfiguration configuration = new TestPluginConfiguration(identifier);
+        configuration.setHardDependencies(List.of(hard));
+        configuration.setSoftDependencies(List.of(soft));
+        configuration.setLoadBefore(List.of(before));
+
+        TestJavaPluginProvider provider = new TestJavaPluginProvider(configuration);
+        REGISTERED_PROVIDERS.add(provider);
+        return provider;
+    }
+
+    /**
+     * Auto generated plugins, this uses a real dependency tree...
+     */
+    private static void setup() {
+        setup("RedAir", new String[]{}, new String[]{"NightShovel", "EmeraldFire"}, new String[]{"GreenShovel", "IronSpork", "BrightBlueShovel", "WireDoor"});
+        setup("BigGrass", new String[]{}, new String[]{"IronEarth", "RedAir"}, new String[]{"BlueFire"});
+        setup("BlueFire", new String[]{}, new String[]{}, new String[]{});
+        setup("BigPaper", new String[]{}, new String[]{"BlueFire"}, new String[]{});
+        setup("EmeraldSpork", new String[]{}, new String[]{}, new String[]{"GoldPaper", "YellowSnow"});
+        setup("GreenShovel", new String[]{}, new String[]{}, new String[]{});
+        setup("BrightBlueGrass", new String[]{"BigPaper"}, new String[]{"DarkSpork"}, new String[]{});
+        setup("GoldPaper", new String[]{}, new String[]{"BlueFire"}, new String[]{});
+        setup("GreenGlass", new String[]{}, new String[]{}, new String[]{});
+        setup("GoldNeptune", new String[]{}, new String[]{"GreenShovel", "GoldNeptuneVersioning"}, new String[]{});
+        setup("RedPaper", new String[]{}, new String[]{"GoldPaper", "GoldFire", "EmeraldGrass", "BlueFire", "CopperSpork", "YellowDoor", "OrangeClam", "BlueSponge", "GoldNeptune", "BrightBlueGrass", "DarkSpoon", "BigShovel", "GreenGlass", "IronGlass"}, new String[]{"IronPaper", "YellowFire"});
+        setup("YellowGrass", new String[]{}, new String[]{"RedAir"}, new String[]{});
+        setup("WireFire", new String[]{}, new String[]{"RedPaper", "WireGrass", "YellowSpork", "NightAir"}, new String[]{});
+        setup("OrangeNeptune", new String[]{}, new String[]{}, new String[]{});
+        setup("BigSpoon", new String[]{"YellowGrass", "GreenShovel"}, new String[]{"RedAir", "GoldNeptune", "BrightBlueGrass", "LightDoor", "LightSpork", "LightEarth", "NightDoor", "OrangeSpoon", "GoldSponge", "GoldDoor", "DarkPaper", "RedPaper", "GreenGlass", "IronGlass", "NightGlass", "BigGrass", "BlueFire", "YellowSpoon", "DiamondGrass", "DiamondShovel", "DarkSnow", "EmeraldGlass", "EmeraldSpoon", "LightFire", "WireGrass", "RedEarth", "WireFire"}, new String[]{});
+        setup("CopperSnow", new String[]{}, new String[]{"RedSnow", "OrangeFire", "WireAir", "GreenGlass", "NightSpork", "EmeraldPaper"}, new String[]{"BlueGrass"});
+        setup("BrightBluePaper", new String[]{}, new String[]{"GoldEarth", "BrightBlueSpoon", "CopperGlass", "LightSporkChat", "DarkAir", "LightEarth", "DiamondDoor", "YellowShovel", "BlueAir", "DarkShovel", "GoldPaper", "BlueFire", "GreenGlass", "YellowSpork", "BigGrass", "OrangePaper", "DarkPaper"}, new String[]{"WireShovel"});
+        setup("LightSponge", new String[]{}, new String[]{}, new String[]{});
+        setup("OrangeShovel", new String[]{}, new String[]{}, new String[]{});
+        setup("GoldGrass", new String[]{}, new String[]{"GreenGlass", "BlueFire"}, new String[]{});
+        setup("IronSponge", new String[]{}, new String[]{"DiamondEarth"}, new String[]{});
+        setup("EmeraldSnow", new String[]{}, new String[]{}, new String[]{});
+        setup("BlueSpoon", new String[]{"BigGrass"}, new String[]{"GreenGlass", "GoldPaper", "GreenShovel", "YellowClam"}, new String[]{});
+        setup("BigSpork", new String[]{}, new String[]{"BigPaper"}, new String[]{});
+        setup("BluePaper", new String[]{}, new String[]{"BigClam", "RedSpoon", "GreenFire", "WireSnow", "OrangeSnow", "BlueFire", "BrightBlueGrass", "YellowSpork", "GreenGlass"}, new String[]{});
+        setup("OrangeSpork", new String[]{}, new String[]{}, new String[]{});
+        setup("DiamondNeptune", new String[]{}, new String[]{"GreenGlass", "GreenShovel", "YellowNeptune"}, new String[]{});
+        setup("BigFire", new String[]{}, new String[]{"BlueFire", "BrightBlueDoor", "GreenGlass"}, new String[]{});
+        setup("NightNeptune", new String[]{}, new String[]{"BlueFire", "DarkGlass", "GoldPaper", "YellowNeptune", "BlueShovel"}, new String[]{});
+        setup("YellowEarth", new String[]{"RedAir"}, new String[]{}, new String[]{});
+        setup("DiamondClam", new String[]{}, new String[]{}, new String[]{});
+        setup("CopperAir", new String[]{}, new String[]{"BigPaper"}, new String[]{});
+        setup("NightSpoon", new String[]{"OrangeNeptune"}, new String[]{"BlueFire", "GreenGlass", "RedSpork", "GoldPaper", "BigShovel", "YellowSponge", "EmeraldSpork"}, new String[]{});
+        setup("GreenClam", new String[]{}, new String[]{"GreenShovel", "BrightBlueEarth", "BigSpoon", "RedPaper", "BlueFire", "GreenGlass", "WireFire", "GreenSnow"}, new String[]{});
+        setup("YellowPaper", new String[]{}, new String[]{}, new String[]{});
+        setup("WireGlass", new String[]{"YellowGrass"}, new String[]{"YellowGlass", "BigSpoon", "CopperSnow", "GreenGlass", "BlueEarth"}, new String[]{});
+        setup("BlueSpork", new String[]{}, new String[]{"BrightBlueGrass"}, new String[]{});
+        setup("CopperShovel", new String[]{}, new String[]{"GreenGlass"}, new String[]{});
+        setup("RedClam", new String[]{}, new String[]{}, new String[]{});
+        setup("EmeraldClam", new String[]{}, new String[]{"BlueFire"}, new String[]{});
+        setup("DarkClam", new String[]{}, new String[]{"GoldAir", "LightGlass"}, new String[]{});
+        setup("WireSpoon", new String[]{}, new String[]{"GoldPaper", "LightSnow"}, new String[]{});
+        setup("CopperNeptune", new String[]{}, new String[]{"GreenGlass", "BigGrass"}, new String[]{});
+        setup("RedNeptune", new String[]{}, new String[]{}, new String[]{});
+        setup("GreenAir", new String[]{}, new String[]{}, new String[]{});
+        setup("RedFire", new String[]{"BrightBlueGrass", "BigPaper"}, new String[]{"BlueFire", "GreenGlass", "BigGrass"}, new String[]{});
+    }
+
+    @Before
+    public void loadProviders() {
+        AtomicInteger currentLoad = new AtomicInteger();
+        ModernPluginLoadingStrategy<PaperTestPlugin> modernPluginLoadingStrategy = new ModernPluginLoadingStrategy<>(new ProviderLoader<>() {
+            @Override
+            public void applyContext(PluginProvider<PaperTestPlugin> provider, DependencyContext dependencyContext) {
+            }
+
+            @Override
+            public boolean load(PluginProvider<PaperTestPlugin> provider, PaperTestPlugin provided) {
+                LOAD_ORDER.put(provider.getConfiguration().getIdentifier(), currentLoad.getAndIncrement());
+                return false;
+            }
+        });
+
+        modernPluginLoadingStrategy.loadProviders(REGISTERED_PROVIDERS);
+    }
+
+    @Test
+    public void testDependencies() {
+        for (PluginProvider<PaperTestPlugin> provider : REGISTERED_PROVIDERS) {
+            PluginConfiguration pluginConfiguration = provider.getConfiguration();
+            String identifier = pluginConfiguration.getIdentifier();
+            Assert.assertTrue("Provider wasn't loaded! (%s)".formatted(identifier), LOAD_ORDER.containsKey(identifier));
+
+            int index = LOAD_ORDER.get(identifier);
+
+            // Hard dependencies should be loaded BEFORE
+            for (String hardDependency : pluginConfiguration.getHardDependencies()) {
+                Assert.assertTrue("Plugin (%s) is missing hard dependency (%s)".formatted(identifier, hardDependency), LOAD_ORDER.containsKey(hardDependency));
+
+                int dependencyIndex = LOAD_ORDER.get(hardDependency);
+                Assert.assertTrue("Plugin (%s) was not loaded BEFORE soft dependency. (%s)".formatted(identifier, hardDependency), index > dependencyIndex);
+            }
+
+            for (String softDependency : pluginConfiguration.getSoftDependencies()) {
+                if (!LOAD_ORDER.containsKey(softDependency)) {
+                    continue;
+                }
+
+                int dependencyIndex = LOAD_ORDER.get(softDependency);
+
+                Assert.assertTrue("Plugin (%s) was not loaded BEFORE soft dependency. (%s)".formatted(identifier, softDependency), index > dependencyIndex);
+            }
+
+            for (String loadBefore : pluginConfiguration.getLoadBefore()) {
+                if (!LOAD_ORDER.containsKey(loadBefore)) {
+                    continue;
+                }
+
+                int dependencyIndex = LOAD_ORDER.get(loadBefore);
+                Assert.assertTrue("Plugin (%s) was NOT loaded BEFORE loadbefore dependency. (%s)".formatted(identifier, loadBefore), index < dependencyIndex);
+            }
+        }
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..03e33a36ed59efcaf0afa38e1a7632adc1d05d08
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
@@ -0,0 +1,146 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.generator.BiomeProvider;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.PluginBase;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.PluginLoader;
+import org.bukkit.plugin.PluginLogger;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.List;
+
+public class PaperTestPlugin extends PluginBase {
+    private final String pluginName;
+    private boolean enabled = true;
+    private final PluginConfiguration configuration;
+
+    public PaperTestPlugin(String pluginName) {
+        this.pluginName = pluginName;
+        this.configuration = new TestPluginConfiguration(pluginName);
+    }
+
+    public PaperTestPlugin(PluginConfiguration configuration) {
+        this.configuration = configuration;
+        this.pluginName = configuration.getIdentifier();
+    }
+
+    @Override
+    public File getDataFolder() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginDescriptionFile getDescription() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginConfiguration getConfiguration() {
+        return this.configuration;
+    }
+
+    @Override
+    public FileConfiguration getConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public InputStream getResource(String filename) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveResource(String resourcePath, boolean replace) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void reloadConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginLogger getLogger() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginLoader getPluginLoader() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public Server getServer() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    @Override
+    public void onDisable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void onLoad() {
+    }
+
+    @Override
+    public void onEnable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isNaggable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public BiomeProvider getDefaultBiomeProvider(String worldName, String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/PluginManagerTest.java b/src/test/java/io/papermc/paper/plugin/PluginManagerTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..726eba26470e62b0e94a91418512e242464800ae
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/PluginManagerTest.java
@@ -0,0 +1,75 @@
+package io.papermc.paper.plugin;
+
+import org.bukkit.Bukkit;
+import org.bukkit.event.Event;
+import org.bukkit.permissions.Permission;
+import org.bukkit.plugin.PluginManager;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.After;
+import org.junit.Test;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
+
+public class PluginManagerTest extends AbstractTestingBase {
+
+    private static final PluginManager pm = Bukkit.getPluginManager();
+
+    @Test
+    public void testSyncSameThread() {
+        final Event event = new TestEvent(false);
+        pm.callEvent(event);
+    }
+
+    @Test
+    public void testRemovePermissionByNameLower() {
+        this.testRemovePermissionByName("lower");
+    }
+
+    @Test
+    public void testRemovePermissionByNameUpper() {
+        this.testRemovePermissionByName("UPPER");
+    }
+
+    @Test
+    public void testRemovePermissionByNameCamel() {
+        this.testRemovePermissionByName("CaMeL");
+    }
+
+    @Test
+    public void testRemovePermissionByPermissionLower() {
+        this.testRemovePermissionByPermission("lower");
+    }
+
+    @Test
+    public void testRemovePermissionByPermissionUpper() {
+        this.testRemovePermissionByPermission("UPPER");
+    }
+
+    @Test
+    public void testRemovePermissionByPermissionCamel() {
+        this.testRemovePermissionByPermission("CaMeL");
+    }
+
+    private void testRemovePermissionByName(final String name) {
+        final Permission perm = new Permission(name);
+        pm.addPermission(perm);
+        assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
+        pm.removePermission(name);
+        assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
+    }
+
+    private void testRemovePermissionByPermission(final String name) {
+        final Permission perm = new Permission(name);
+        pm.addPermission(perm);
+        assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
+        pm.removePermission(perm);
+        assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
+    }
+
+    @After
+    public void tearDown() {
+        pm.clearPlugins();
+        assertThat(pm.getPermissions(), is(empty()));
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..51c08740edffd152c8e2b6d3676ff7f1ce6090c6
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
@@ -0,0 +1,42 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.manager.PaperPluginManagerImpl;
+import org.bukkit.Bukkit;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class SyntheticEventTest {
+
+    @Test
+    public void test() {
+        PaperTestPlugin paperTestPlugin = new PaperTestPlugin("synthetictest");
+        PaperPluginManagerImpl paperPluginManager = new PaperPluginManagerImpl(Bukkit.getServer(), null, null);
+
+        TestEvent event = new TestEvent(false);
+        Impl impl = new Impl();
+
+        paperPluginManager.registerEvents(impl, paperTestPlugin);
+        paperPluginManager.callEvent(event);
+
+        Assert.assertEquals(1, impl.callCount);
+    }
+
+    public abstract static class Base<E extends Event> implements Listener {
+        int callCount = 0;
+
+        public void accept(E evt) {
+            callCount++;
+        }
+    }
+
+    public static class Impl extends Base<TestEvent> {
+        @Override
+        @EventHandler
+        public void accept(TestEvent evt) {
+            super.accept(evt);
+        }
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/TestEvent.java b/src/test/java/io/papermc/paper/plugin/TestEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..04903794a8ee4dd73162ae240862ff6dc4cb4e24
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/TestEvent.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.plugin;
+
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+public class TestEvent extends Event {
+    private static final HandlerList handlers = new HandlerList();
+
+    public TestEvent(boolean async) {
+        super(async);
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/TestJavaPluginProvider.java b/src/test/java/io/papermc/paper/plugin/TestJavaPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..50141d11ceb08c382c989f61c8762629274e7a01
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/TestJavaPluginProvider.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class TestJavaPluginProvider implements PluginProvider<PaperTestPlugin> {
+
+    private final TestPluginConfiguration testPluginConfiguration;
+
+    public TestJavaPluginProvider(TestPluginConfiguration testPluginConfiguration) {
+        this.testPluginConfiguration = testPluginConfiguration;
+    }
+
+    @Override
+    public @NotNull Path getSource() {
+        return Path.of("dummy");
+    }
+
+    @Override
+    public JarFile file() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public PaperTestPlugin createInstance() {
+        return new PaperTestPlugin(this.testPluginConfiguration);
+    }
+
+    @Override
+    public PluginConfiguration getConfiguration() {
+        return this.testPluginConfiguration;
+    }
+
+    @Override
+    public Logger getLogger() {
+        return Logger.getLogger("TestPlugin");
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/TestPluginConfiguration.java b/src/test/java/io/papermc/paper/plugin/TestPluginConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4d0eda6d9fe9e5b457a39efd4a37039e268d4c0
--- /dev/null
+++ b/src/test/java/io/papermc/paper/plugin/TestPluginConfiguration.java
@@ -0,0 +1,114 @@
+package io.papermc.paper.plugin;
+
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.PluginLoadOrder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public class TestPluginConfiguration implements PluginConfiguration {
+
+    private final String identifier;
+    private List<String> hardDependencies = List.of();
+    private List<String> softDependencies = List.of();
+    private List<String> loadBefore = List.of();
+
+    public TestPluginConfiguration(String identifier) {
+        this.identifier = identifier;
+    }
+
+    @Override
+    public @NotNull String getIdentifier() {
+        return this.identifier;
+    }
+
+    @Override
+    public @NotNull String getMain() {
+        return "null";
+    }
+
+    @Override
+    public @NotNull PluginLoadOrder getLoadPhase() {
+        return PluginLoadOrder.POSTWORLD;
+    }
+
+    @Override
+    public @NotNull String getVersion() {
+        return "1.0";
+    }
+
+    @Override
+    public @NotNull String getLoggingPrefix() {
+        return this.identifier;
+    }
+
+    public void setHardDependencies(List<String> hardDependencies) {
+        this.hardDependencies = hardDependencies;
+    }
+
+    @Override
+    public @NotNull List<String> getHardDependencies() {
+        return this.hardDependencies;
+    }
+
+    public void setSoftDependencies(List<String> softDependencies) {
+        this.softDependencies = softDependencies;
+    }
+
+    @Override
+    public @NotNull List<String> getSoftDependencies() {
+        return this.softDependencies;
+    }
+
+    public void setLoadBefore(List<String> loadBefore) {
+        this.loadBefore = loadBefore;
+    }
+
+    @Override
+    public @NotNull List<String> getLoadBefore() {
+        return this.loadBefore;
+    }
+
+    @Override
+    public @NotNull List<String> getProvides() {
+        return List.of();
+    }
+
+    @Override
+    public @NotNull List<String> getAuthors() {
+        return List.of();
+    }
+
+    @Override
+    public @NotNull List<String> getContributors() {
+        return List.of();
+    }
+
+    @Override
+    public @Nullable String getDescription() {
+        return "null";
+    }
+
+    @Override
+    public @Nullable String getWebsite() {
+        return "null";
+    }
+
+    @Override
+    public @NotNull List<Permission> getPermissions() {
+        return List.of();
+    }
+
+    @Override
+    public @NotNull PermissionDefault getDefaultPermission() {
+        return PermissionDefault.TRUE;
+    }
+
+    @Override
+    public @NotNull String getApiVersion() {
+        return "null";
+    }
+}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index 2ddceb709291d3bd713621ffa4020c02ec26bb21..53bf98c512cc39270be70ca579ecbf5da744ddf4 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -106,6 +106,17 @@ public final class DummyServer implements InvocationHandler {
                         }
                     }
             );
+            // Paper start
+            methods.put(
+                Server.class.getMethod("isPrimaryThread"),
+                new MethodHandler() {
+                    @Override
+                    public Object handle(DummyServer server, Object[] args) {
+                        return Thread.currentThread().equals(server.creatingThread);
+                    }
+                }
+            );
+            // Paper end
             // Paper start - modeled off of TestServer in the API tests module
             methods.put(
                 Server.class.getMethod("getPluginManager"),
@@ -119,7 +130,7 @@ public final class DummyServer implements InvocationHandler {
             DummyServer server = new DummyServer();
             Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
             Bukkit.setServer(instance);
-            server.pluginManager = new org.bukkit.plugin.SimplePluginManager(instance, new org.bukkit.command.SimpleCommandMap(instance));
+            server.pluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(instance, new org.bukkit.command.SimpleCommandMap(instance), null);
             // Paper end
         } catch (Throwable t) {
             throw new Error(t);
@@ -131,6 +142,7 @@ public final class DummyServer implements InvocationHandler {
     private DummyServer() {};
 
     private org.bukkit.plugin.PluginManager pluginManager; // Paper
+    private Thread creatingThread = Thread.currentThread(); // Paper
     @Override
     public Object invoke(Object proxy, Method method, Object[] args) {
         MethodHandler handler = DummyServer.methods.get(method);
