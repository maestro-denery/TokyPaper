From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Fri, 2 Sep 2022 02:04:38 +0300
Subject: [PATCH] PreServer-API


diff --git a/src/main/java/io/toky/tokypaper/EventManager.java b/src/main/java/io/toky/tokypaper/EventManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc639514fcfd890a52e7e2ed720f384e51ec2ebe
--- /dev/null
+++ b/src/main/java/io/toky/tokypaper/EventManager.java
@@ -0,0 +1,54 @@
+package io.toky.tokypaper;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.EventExecutor;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+public interface EventManager {
+	/**
+	 * Calls an event with the given details
+	 *
+	 * @param event Event details
+	 * @throws IllegalStateException Thrown when an asynchronous event is
+	 *     fired from synchronous code.
+	 *     <p>
+	 *     <i>Note: This is best-effort basis, and should not be used to test
+	 *     synchronized state. This is an indicator for flawed flow logic.</i>
+	 */
+	public void callEvent(@NotNull Event event) throws IllegalStateException;
+
+	/**
+	 * Registers all the events in the given listener class
+	 *
+	 * @param listener Listener to register
+	 * @param plugin Plugin to register
+	 */
+	public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin);
+
+	/**
+	 * Registers the specified executor to the given event class
+	 *
+	 * @param event Event type to register
+	 * @param listener Listener to register
+	 * @param priority Priority to register this event at
+	 * @param executor EventExecutor to register
+	 * @param plugin Plugin to register
+	 */
+	public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin);
+
+	/**
+	 * Registers the specified executor to the given event class
+	 *
+	 * @param event Event type to register
+	 * @param listener Listener to register
+	 * @param priority Priority to register this event at
+	 * @param executor EventExecutor to register
+	 * @param plugin Plugin to register
+	 * @param ignoreCancelled Whether to pass cancelled events or not
+	 */
+	public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled);
+
+}
diff --git a/src/main/java/io/toky/tokypaper/TokyPaper.java b/src/main/java/io/toky/tokypaper/TokyPaper.java
index d670875e2a7e7a369923dbbc13a9b7a8e8279a9c..1cfbcd1a407df8151dac06068fd14656c2c934f5 100644
--- a/src/main/java/io/toky/tokypaper/TokyPaper.java
+++ b/src/main/java/io/toky/tokypaper/TokyPaper.java
@@ -5,10 +5,25 @@ import io.papermc.paper.plugin.bootstrap.PluginBootstrap;
 public final class TokyPaper {
 	private TokyPaper() {}
 	private static PluginBootstrap.PluginBootstrapManager pluginBootstrapManager = null;
+	private static EventManager eventManager;
+
+	public static PluginBootstrap.PluginBootstrapManager getPluginBootstrapManager() {
+		return pluginBootstrapManager;
+	}
+
+	public static EventManager getEventManager() {
+		return eventManager;
+	}
 
 	public static void setPluginBootstrapManager(PluginBootstrap.PluginBootstrapManager pluginBootstrapManager) {
 		if (TokyPaper.pluginBootstrapManager != null)
 			throw new IllegalStateException("The manager instance is not null!");
 		TokyPaper.pluginBootstrapManager = pluginBootstrapManager;
 	}
+
+	public static void setEventManager(EventManager eventManager) {
+		if (TokyPaper.eventManager != null)
+			throw new IllegalStateException("The manager instance is not null!");
+		TokyPaper.eventManager = eventManager;
+	}
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 97d498cf3c3545e2835fe0d4c5e4fe9f121014b3..cf5e00f809b87fb1de25d6df85267c6ad9d18e97 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Handles all plugin management from the Server
  */
-public interface PluginManager extends io.papermc.paper.plugin.PermissionManager { // Paper
+public interface PluginManager extends io.papermc.paper.plugin.PermissionManager, io.toky.tokypaper.EventManager { // Paper
 
     /**
      * Registers the specified plugin loader
@@ -103,49 +103,6 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      */
     public void clearPlugins();
 
-    /**
-     * Calls an event with the given details
-     *
-     * @param event Event details
-     * @throws IllegalStateException Thrown when an asynchronous event is
-     *     fired from synchronous code.
-     *     <p>
-     *     <i>Note: This is best-effort basis, and should not be used to test
-     *     synchronized state. This is an indicator for flawed flow logic.</i>
-     */
-    public void callEvent(@NotNull Event event) throws IllegalStateException;
-
-    /**
-     * Registers all the events in the given listener class
-     *
-     * @param listener Listener to register
-     * @param plugin Plugin to register
-     */
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin);
-
-    /**
-     * Registers the specified executor to the given event class
-     *
-     * @param event Event type to register
-     * @param listener Listener to register
-     * @param priority Priority to register this event at
-     * @param executor EventExecutor to register
-     * @param plugin Plugin to register
-     */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin);
-
-    /**
-     * Registers the specified executor to the given event class
-     *
-     * @param event Event type to register
-     * @param listener Listener to register
-     * @param priority Priority to register this event at
-     * @param executor EventExecutor to register
-     * @param plugin Plugin to register
-     * @param ignoreCancelled Whether to pass cancelled events or not
-     */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled);
-
     /**
      * Enables the specified plugin
      * <p>
