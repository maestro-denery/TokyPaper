From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Fri, 2 Sep 2022 02:04:17 +0300
Subject: [PATCH] PreServer-API


diff --git a/src/main/java/io/papermc/paper/plugin/DependencyContext.java b/src/main/java/io/papermc/paper/plugin/DependencyContext.java
deleted file mode 100644
index 93e15901fcc2c9fbed2dd55e31df30d16314ceef..0000000000000000000000000000000000000000
--- a/src/main/java/io/papermc/paper/plugin/DependencyContext.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package io.papermc.paper.plugin;
-
-import io.papermc.paper.plugin.configuration.PluginConfiguration;
-
-/*
-We need to be able to expose the dependency tree of when certain providers are being loaded.
-The issue is that we don't know where this context might be, as it might be in the actual storage that
-this will be needed or just in the plugin manager.
-
-We need this to be able to allow resolving other classes in the BootstrapProviderStorage, PluginProviderStorage, and then the PaperPluginManagerImpl.
- */
-public interface DependencyContext {
-
-    boolean isTransitiveDependency(PluginConfiguration plugin, PluginConfiguration depend);
-
-    boolean hasDependency(String pluginIdentifier);
-
-}
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index be11dbf67508fe5ecd744403881ffa7300c689fb..17521248be800080e2484a15b42cbf5868b29aa7 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -14,22 +14,17 @@ import java.lang.reflect.Method;
 import java.util.*;
 import java.util.logging.Level;
 
-class PaperEventManager {
-
-    private final Server server;
-
-    public PaperEventManager(Server server) {
-        this.server = server;
-    }
-
+public class PaperEventManager implements io.toky.tokypaper.EventManager { // TokyPaper
+	// TokyPaper start
+	final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("Minecraft");
     // SimplePluginManager
     public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous() && this.server.isPrimaryThread()) {
+        if (event.isAsynchronous() && isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+        } else if (!event.isAsynchronous() && !isPrimaryThread() && !hasServerStopped()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
-
+		// TokyPaper end
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
 
@@ -46,7 +41,7 @@ class PaperEventManager {
                 if (plugin.isNaggable()) {
                     plugin.setNaggable(false);
 
-                    this.server.getLogger().log(Level.SEVERE, String.format(
+                    logger.log(Level.SEVERE, String.format( // TokyPaper
                         "Nag author(s): '%s' of '%s' about the following: %s",
                         plugin.getConfiguration().getAuthors(),
                         plugin.getConfiguration().getDisplayName(),
@@ -55,7 +50,7 @@ class PaperEventManager {
                 }
             } catch (Throwable ex) {
                 String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getConfiguration().getDisplayName();
-                this.server.getLogger().log(Level.SEVERE, msg, ex);
+                logger.log(Level.SEVERE, msg, ex); // TokyPaper
                 if (!(event instanceof ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     this.callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
                 }
@@ -152,7 +147,7 @@ class PaperEventManager {
                 // This loop checks for extending deprecated events
                 if (clazz.getAnnotation(Deprecated.class) != null) {
                     Warning warning = clazz.getAnnotation(Warning.class);
-                    Warning.WarningState warningState = this.server.getWarningState();
+                    Warning.WarningState warningState = net.minecraft.server.Main.getServerConfiguration().warningState(); // TokyPaper
                     if (!warningState.printFor(warning)) {
                         break;
                     }
@@ -179,4 +174,15 @@ class PaperEventManager {
     public void clearEvents() {
         HandlerList.unregisterAll();
     }
+	// TokyPaper start
+	private static boolean isPrimaryThread() {
+		final Optional<net.minecraft.server.MinecraftServer> server = Optional.ofNullable(net.minecraft.server.MinecraftServer.getServer());
+		return Thread.currentThread().equals(server.map(s -> s.serverThread).orElse(net.minecraft.server.Main.getMainThread())) ||
+				Thread.currentThread().equals(server.map(s -> s.shutdownThread).orElse(net.minecraft.server.Main.getMainThread())); // Is this the most perfect solution?
+	}
+
+	private static boolean hasServerStopped() {
+		return Optional.ofNullable(net.minecraft.server.MinecraftServer.getServer()).map(net.minecraft.server.MinecraftServer::hasStopped).orElse(false);
+	}
+	// TokyPaper end
 }
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 0473d0a764016bcc127696e73e0c39149dfbf5eb..d2e67a9b9c291e56c400d4e7421f31f5b76cfdd3 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -44,14 +44,11 @@ class PaperPluginInstanceManager {
     private static final DirectoryProviderSource DIRECTORY_PROVIDER_SOURCE = new DirectoryProviderSource();
 
     private final List<Plugin> plugins = new ArrayList<>();
-    private final Map<String, Plugin> lookupNames = new HashMap<>();
 
     private final PluginManager pluginManager;
     private final CommandMap commandMap;
     private final Server server;
 
-    private final MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
-
     public PaperPluginInstanceManager(PluginManager pluginManager, CommandMap commandMap, Server server) {
         this.commandMap = commandMap;
         this.server = server;
@@ -59,7 +56,7 @@ class PaperPluginInstanceManager {
     }
 
     public @Nullable Plugin getPlugin(@NotNull String name) {
-        return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
+        return io.toky.tokypaper.PaperPluginDependencyContextImpl.INSTANCE.getPlugin(name); // TokyPaper
     }
 
     public @NotNull Plugin[] getPlugins() {
@@ -81,28 +78,10 @@ class PaperPluginInstanceManager {
     }
 
     public void loadPlugin(Plugin provided) {
-        PluginConfiguration configuration = provided.getConfiguration();
-        String dependencyIdentifier = configuration.getIdentifier();
-
+		// TokyPaper start
         this.plugins.add(provided);
-        this.lookupNames.put(configuration.getIdentifier().toLowerCase(java.util.Locale.ENGLISH), provided);
-        for (String providedPlugin : configuration.getProvides()) {
-            this.lookupNames.putIfAbsent(providedPlugin.toLowerCase(java.util.Locale.ENGLISH), provided);
-        }
-
-        for (String dependency : configuration.getHardDependencies()) {
-            this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
-        }
-
-        for (String loadBeforeTarget : configuration.getLoadBefore()) {
-            this.dependencyGraph.putEdge(loadBeforeTarget, dependencyIdentifier);
-        }
-
-        for (String dependency : configuration.getSoftDependencies()) {
-            this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
-        }
-
-        this.dependencyGraph.addNode(dependencyIdentifier); // Make sure dependencies at least have a node
+		io.toky.tokypaper.PaperPluginDependencyContextImpl.INSTANCE.loadDependencies(provided);
+        // TokyPaper end
     }
 
     // InvalidDescriptionException is never used, because the old JavaPluginLoader would wrap the exception.
@@ -195,7 +174,7 @@ class PaperPluginInstanceManager {
         synchronized (this) {
             this.disablePlugins();
             this.plugins.clear();
-            this.lookupNames.clear();
+			io.toky.tokypaper.PaperPluginDependencyContextImpl.INSTANCE.clearLookUpNames(); // TokyPaper
         }
     }
 
@@ -352,24 +331,6 @@ class PaperPluginInstanceManager {
         this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerPluginEnableDisableException(msg, ex, plugin)));
     }
 
-    public boolean isTransitiveDepend(@NotNull PluginConfiguration plugin, @NotNull PluginConfiguration depend) {
-        String pluginIdentifier = plugin.getIdentifier();
-
-        if (this.dependencyGraph.nodes().contains(pluginIdentifier)) {
-            Set<String> reachableNodes = Graphs.reachableNodes(this.dependencyGraph, pluginIdentifier);
-            if (reachableNodes.contains(depend.getIdentifier())) {
-                return true;
-            }
-            for (String provided : depend.getProvides()) {
-                if (reachableNodes.contains(provided)) {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-
     public boolean hasDependency(String pluginIdentifier) {
         return this.getPlugin(pluginIdentifier) != null;
     }
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 5ed863fddf9fb1cad1261b1e865dfc2f768970f1..39e0850245d3b8879fc7d49f27ac69cba63af5b6 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -30,7 +30,7 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
 
     public PaperPluginManagerImpl(Server server, CommandMap commandMap, @Nullable SimplePluginManager permissionManager) {
         this.instanceManager = new PaperPluginInstanceManager(this, commandMap, server);
-        this.paperEventManager = new PaperEventManager(server);
+        this.paperEventManager = new PaperEventManager(); // TokyPaper
 
         if (permissionManager == null) {
             this.permissionManager = new NormalPaperPermissionManager();
@@ -105,7 +105,7 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
 
     @Override
     public boolean isTransitiveDependency(PluginConfiguration pluginConfiguration, PluginConfiguration dependencyConfig) {
-        return this.instanceManager.isTransitiveDepend(pluginConfiguration, dependencyConfig);
+        return io.toky.tokypaper.TokyPaper.getPluginDependencyContext().isTransitiveDependency(pluginConfiguration, dependencyConfig); // TokyPaper
     }
 
     @Override
diff --git a/src/main/java/io/toky/tokypaper/PaperPluginDependencyContextImpl.java b/src/main/java/io/toky/tokypaper/PaperPluginDependencyContextImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..8bd9706712ad93f2db0a24dbd369aa1a7f782628
--- /dev/null
+++ b/src/main/java/io/toky/tokypaper/PaperPluginDependencyContextImpl.java
@@ -0,0 +1,77 @@
+package io.toky.tokypaper;
+
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.Graphs;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.DependencyContext;
+import io.papermc.paper.plugin.configuration.PluginConfiguration;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public final class PaperPluginDependencyContextImpl implements DependencyContext {
+	private PaperPluginDependencyContextImpl() {}
+	public static final PaperPluginDependencyContextImpl INSTANCE = new PaperPluginDependencyContextImpl();
+
+	private final Map<String, Plugin> lookupNames = new HashMap<>();
+	private final MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+
+	@Override
+	public boolean isTransitiveDependency(PluginConfiguration plugin, PluginConfiguration depend) {
+		String pluginIdentifier = plugin.getIdentifier();
+
+		if (this.dependencyGraph.nodes().contains(pluginIdentifier)) {
+			Set<String> reachableNodes = Graphs.reachableNodes(this.dependencyGraph, pluginIdentifier);
+			if (reachableNodes.contains(depend.getIdentifier())) {
+				return true;
+			}
+			for (String provided : depend.getProvides()) {
+				if (reachableNodes.contains(provided)) {
+					return true;
+				}
+			}
+		}
+
+		return false;
+	}
+
+	@Override
+	public boolean hasDependency(String pluginIdentifier) {
+		return false;
+	}
+
+	public void loadDependencies(Plugin provided) {
+		PluginConfiguration configuration = provided.getConfiguration();
+		String dependencyIdentifier = configuration.getIdentifier();
+
+		this.lookupNames.put(configuration.getIdentifier().toLowerCase(java.util.Locale.ENGLISH), provided);
+		for (String providedPlugin : configuration.getProvides()) {
+			this.lookupNames.putIfAbsent(providedPlugin.toLowerCase(java.util.Locale.ENGLISH), provided);
+		}
+
+		for (String dependency : configuration.getHardDependencies()) {
+			this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
+		}
+
+		for (String loadBeforeTarget : configuration.getLoadBefore()) {
+			this.dependencyGraph.putEdge(loadBeforeTarget, dependencyIdentifier);
+		}
+
+		for (String dependency : configuration.getSoftDependencies()) {
+			this.dependencyGraph.putEdge(dependencyIdentifier, dependency);
+		}
+
+		this.dependencyGraph.addNode(dependencyIdentifier); // Make sure dependencies at least have a node
+	}
+
+	public Plugin getPlugin(@NotNull String name) {
+		return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH));
+	}
+
+	public void clearLookUpNames() {
+		lookupNames.clear();
+	}
+}
diff --git a/src/main/java/io/toky/tokypaper/ServerConfigurationImpl.java b/src/main/java/io/toky/tokypaper/ServerConfigurationImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..02b91c7a3902a67ae41a02d2d50acee20749a26e
--- /dev/null
+++ b/src/main/java/io/toky/tokypaper/ServerConfigurationImpl.java
@@ -0,0 +1,175 @@
+package io.toky.tokypaper;
+
+import com.google.common.base.Charsets;
+
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+
+import joptsimple.OptionSet;
+
+import net.minecraft.server.dedicated.DedicatedServer;
+
+import net.minecraft.server.level.TicketType;
+
+import org.bukkit.Warning;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.map.CraftMapColorCache;
+import org.bukkit.craftbukkit.util.CraftSpawnCategory;
+import org.bukkit.entity.SpawnCategory;
+import org.bukkit.map.MapPalette;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ServerConfigurationImpl {
+	private final OptionSet options;
+	private Consumer<DedicatedServer> executeOnServerCreationConsumer;
+
+	private final Logger logger = Logger.getLogger("Minecraft");
+
+	private YamlConfiguration configuration;
+	private YamlConfiguration commandsConfiguration;
+
+	private boolean overrideAllCommandBlockCommands;
+	public boolean ignoreVanillaPermissions;
+	private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
+	private Warning.WarningState warningState = Warning.WarningState.DEFAULT;
+	public String minimumAPI;
+
+	public ServerConfigurationImpl(OptionSet options) {
+		this.options = options;
+		this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
+		this.configuration.options().copyDefaults(true);
+		this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+		ConfigurationSection legacyAlias = null;
+		if (!this.configuration.isString("aliases")) {
+			legacyAlias = this.configuration.getConfigurationSection("aliases");
+			this.configuration.set("aliases", "now-in-commands.yml");
+		}
+		this.saveConfig();
+		if (this.getCommandsConfigFile().isFile()) {
+			legacyAlias = null;
+		}
+		this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
+		this.commandsConfiguration.options().copyDefaults(true);
+		this.commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
+
+		this.saveCommandsConfig();
+
+		// Migrate aliases from old file and add previously implicit $1- to pass all arguments
+		if (legacyAlias != null) {
+			ConfigurationSection aliases = this.commandsConfiguration.createSection("aliases");
+			for (String key : legacyAlias.getKeys(false)) {
+				ArrayList<String> commands = new ArrayList<String>();
+
+				if (legacyAlias.isList(key)) {
+					for (String command : legacyAlias.getStringList(key)) {
+						commands.add(command + " $1-");
+					}
+				} else {
+					commands.add(legacyAlias.getString(key) + " $1-");
+				}
+
+				aliases.set(key, commands);
+			}
+		}
+
+		this.saveCommandsConfig();
+		this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
+		this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+		co.aikar.timings.Timings.setTimingsEnabled(this.configuration.getBoolean("settings.plugin-profiling")); // Paper
+		this.overrideSpawnLimits();
+		this.executeOnServerCreationConsumer = server -> {
+			this.configuration.getInt("ticks-per.autosave");
+		};
+		this.warningState = Warning.WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
+		TicketType.PLUGIN.timeout = Math.min(20, this.configuration.getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
+		this.minimumAPI = this.configuration.getString("settings.minimum-api");
+		// Set map color cache
+		if (this.configuration.getBoolean("settings.use-map-color-cache")) {
+			MapPalette.setMapColorCache(new CraftMapColorCache(this.logger));
+		}
+	}
+
+	public YamlConfiguration configuration() {
+		return configuration;
+	}
+
+	public void setConfiguration(YamlConfiguration configuration) {
+		this.configuration = configuration;
+	}
+
+	public YamlConfiguration commandsConfiguration() {
+		return commandsConfiguration;
+	}
+
+	public void setCommandsConfiguration(YamlConfiguration commandsConfiguration) {
+		this.commandsConfiguration = commandsConfiguration;
+	}
+
+	public boolean overrideAllCommandBlockCommands() {
+		return overrideAllCommandBlockCommands;
+	}
+
+	public void setOverrideAllCommandBlockCommands(boolean overrideAllCommandBlockCommands) {
+		this.overrideAllCommandBlockCommands = overrideAllCommandBlockCommands;
+	}
+
+	public Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit() {
+		return spawnCategoryLimit;
+	}
+
+	public void overrideSpawnLimits() {
+		for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+			if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+				this.spawnCategoryLimit.put(spawnCategory, this.configuration.getInt(CraftSpawnCategory.getConfigNameSpawnLimit(spawnCategory)));
+			}
+		}
+	}
+
+	public Warning.WarningState warningState() {
+		return warningState;
+	}
+
+	public void setWarningState(Warning.WarningState warningState) {
+		this.warningState = warningState;
+	}
+
+	public void setIgnoreVanillaPermissions(boolean ignoreVanillaPermissions) {
+		this.ignoreVanillaPermissions = ignoreVanillaPermissions;
+	}
+
+	public void saveConfig() {
+		try {
+			this.configuration.save(this.getConfigFile());
+		} catch (IOException ex) {
+			Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
+		}
+	}
+
+	private void saveCommandsConfig() {
+		try {
+			this.commandsConfiguration.save(this.getCommandsConfigFile());
+		} catch (IOException ex) {
+			Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
+		}
+	}
+
+	public File getCommandsConfigFile() {
+		return (File) options.valueOf("commands-settings");
+	}
+
+	public File getConfigFile() {
+		return (File) options.valueOf("bukkit-settings");
+	}
+
+	public Consumer<DedicatedServer> getExecuteOnServerCreationConsumer() {
+		return executeOnServerCreationConsumer;
+	}
+}
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index dd0143f319d4adef8834c513af34b1cce7a94a84..e8b450b08e6138d2b45c6fc5ab57c987e598c0cc 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -209,7 +209,7 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
     // CraftBukkit start
     public boolean hasPermission(int i, String bukkitPermission) {
         // World is null when loading functions
-        return ((this.getLevel() == null || !this.getLevel().getCraftServer().ignoreVanillaPermissions) && this.permissionLevel >= i) || this.getBukkitSender().hasPermission(bukkitPermission);
+        return ((this.getLevel() == null || !this.getLevel().getCraftServer().serverConfiguration.ignoreVanillaPermissions) && this.permissionLevel >= i) || this.getBukkitSender().hasPermission(bukkitPermission); // TokyPaper
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 6229c360a760559fdbfa8a88716935a5a88f22ef..34cc2ea0120c489f740abe32348015d4b654eb0d 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -65,11 +65,17 @@ public class Main {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     public static Path pluginDirectory;
+	// TokyPaper start - PreServer API
+	private static Thread mainThread;
+	private static io.toky.tokypaper.ServerConfigurationImpl serverConfiguration;
+	private static final io.papermc.paper.plugin.manager.PaperEventManager eventManager = new io.papermc.paper.plugin.manager.PaperEventManager();
+	// TokyPaper end
 
     public Main() {}
 
     @DontObfuscate
     public static void main(final OptionSet optionset) { // CraftBukkit - replaces main(String[] astring)
+		Main.mainThread = Thread.currentThread(); // TokyPaper
         SharedConstants.tryDetectVersion();
         /* CraftBukkit start - Replace everything
         OptionParser optionparser = new OptionParser();
@@ -104,6 +110,11 @@ public class Main {
             if (optionset.has("jfrProfile")) { // CraftBukkit
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
+			// TokyPaper start - PreServer
+			serverConfiguration = new io.toky.tokypaper.ServerConfigurationImpl(optionset);
+			io.toky.tokypaper.TokyPaper.setEventManager(eventManager);
+			io.toky.tokypaper.TokyPaper.setPluginDependencyContext(io.toky.tokypaper.PaperPluginDependencyContextImpl.INSTANCE);
+			// TokyPaper end
 			// Paper start
 			io.papermc.paper.plugin.provider.service.classloader.PaperClassloaderBytecodeModifier.init();
 			io.papermc.paper.plugin.provider.source.Providers provider = io.papermc.paper.plugin.provider.source.Providers.INSTANCE;
@@ -271,6 +282,7 @@ public class Main {
             Class.forName(net.minecraft.world.entity.npc.VillagerTrades.class.getName());// Paper - load this sync so it won't fail later async
             final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
                 DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, config.get(), ops.get(), thread, convertable_conversionsession, resourcepackrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
+				serverConfiguration.getExecuteOnServerCreationConsumer().accept(dedicatedserver1); // TokyPaper - PreServer
 
                 /*
                 dedicatedserver1.setSingleplayerProfile(optionset.has(optionspec8) ? new GameProfile((UUID) null, (String) optionset.valueOf(optionspec8)) : null);
@@ -318,6 +330,20 @@ public class Main {
         worldUpgrader.convert();
     }
     // Paper end - fix and optimise world upgrading
+	// TokyPaper start - PreServer
+	public static io.toky.tokypaper.ServerConfigurationImpl getServerConfiguration() {
+		return serverConfiguration;
+	}
+
+	public static io.papermc.paper.plugin.manager.PaperEventManager getEventManager() {
+		return eventManager;
+	}
+
+	public static Thread getMainThread() {
+		return mainThread;
+	}
+
+	// TokyPaper end
 
     public static void forceUpgrade(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, boolean eraseCache, BooleanSupplier continueCheck, WorldGenSettings generatorOptions) {
         Main.LOGGER.info("Forcing world upgrade! {}", session.getLevelId()); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7dd97e08a6ab53a57ac061361a257b1fba0d6188..4c57cad6a9993c7a7071c0611f8ba07d50316281 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -264,29 +264,23 @@ public final class CraftServer implements Server {
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
     private final Map<Class<?>, Registry<?>> registries = new HashMap<>();
-    private YamlConfiguration configuration;
-    private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
     private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().weakValues().makeMap();
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
-    private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
     private File container;
-    private WarningState warningState = WarningState.DEFAULT;
-    public String minimumAPI;
     public CraftScoreboardManager scoreboardManager;
     public boolean playerCommandState;
     private boolean printSaveWarning;
     private CraftIconCache icon;
-    private boolean overrideAllCommandBlockCommands = false;
-    public boolean ignoreVanillaPermissions = false;
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     private final io.papermc.paper.datapack.PaperDatapackManager datapackManager; // Paper
     public static Exception excessiveVelEx; // Paper - Velocity warnings
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
+	public final io.toky.tokypaper.ServerConfigurationImpl serverConfiguration = net.minecraft.server.Main.getServerConfiguration(); // TokyPaper - PreServer
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -322,93 +316,13 @@ public final class CraftServer implements Server {
             this.getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
-        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
-        this.configuration.options().copyDefaults(true);
-        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
-        ConfigurationSection legacyAlias = null;
-        if (!this.configuration.isString("aliases")) {
-            legacyAlias = this.configuration.getConfigurationSection("aliases");
-            this.configuration.set("aliases", "now-in-commands.yml");
-        }
-        this.saveConfig();
-        if (this.getCommandsConfigFile().isFile()) {
-            legacyAlias = null;
-        }
-        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
-        this.commandsConfiguration.options().copyDefaults(true);
-        this.commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
-        this.saveCommandsConfig();
-
-        // Migrate aliases from old file and add previously implicit $1- to pass all arguments
-        if (legacyAlias != null) {
-            ConfigurationSection aliases = this.commandsConfiguration.createSection("aliases");
-            for (String key : legacyAlias.getKeys(false)) {
-                ArrayList<String> commands = new ArrayList<String>();
-
-                if (legacyAlias.isList(key)) {
-                    for (String command : legacyAlias.getStringList(key)) {
-                        commands.add(command + " $1-");
-                    }
-                } else {
-                    commands.add(legacyAlias.getString(key) + " $1-");
-                }
-
-                aliases.set(key, commands);
-            }
-        }
-
-        this.saveCommandsConfig();
-        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
-        co.aikar.timings.Timings.setTimingsEnabled(this.configuration.getBoolean("settings.plugin-profiling")); // Paper
-        this.overrideSpawnLimits();
-        console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
-        this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
-        TicketType.PLUGIN.timeout = Math.min(20, this.configuration.getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
-        this.minimumAPI = this.configuration.getString("settings.minimum-api");
         this.loadIcon();
 
-        // Set map color cache
-        if (this.configuration.getBoolean("settings.use-map-color-cache")) {
-            MapPalette.setMapColorCache(new CraftMapColorCache(this.logger));
-        }
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
     }
 
     public boolean getCommandBlockOverride(String command) {
-        return this.overrideAllCommandBlockCommands || this.commandsConfiguration.getStringList("command-block-overrides").contains(command);
-    }
-
-    private File getConfigFile() {
-        return (File) console.options.valueOf("bukkit-settings");
-    }
-
-    private File getCommandsConfigFile() {
-        return (File) console.options.valueOf("commands-settings");
-    }
-
-    private void overrideSpawnLimits() {
-        for (SpawnCategory spawnCategory : SpawnCategory.values()) {
-            if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
-                this.spawnCategoryLimit.put(spawnCategory, this.configuration.getInt(CraftSpawnCategory.getConfigNameSpawnLimit(spawnCategory)));
-            }
-        }
-    }
-
-    private void saveConfig() {
-        try {
-            this.configuration.save(this.getConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
-        }
-    }
-
-    private void saveCommandsConfig() {
-        try {
-            this.commandsConfiguration.save(this.getCommandsConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
-        }
+        return serverConfiguration.overrideAllCommandBlockCommands() || serverConfiguration.commandsConfiguration().getStringList("command-block-overrides").contains(command); // TokyPaper
     }
 
     public void loadPlugins() {
@@ -705,7 +619,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean getAllowEnd() {
-        return this.configuration.getBoolean("settings.allow-end");
+        return serverConfiguration.configuration().getBoolean("settings.allow-end"); // TokyPaper
     }
 
     @Override
@@ -714,11 +628,11 @@ public final class CraftServer implements Server {
     }
 
     public boolean getWarnOnOverload() {
-        return this.configuration.getBoolean("settings.warn-on-overload");
+        return serverConfiguration.configuration().getBoolean("settings.warn-on-overload"); // TokyPaper
     }
 
     public boolean getQueryPlugins() {
-        return this.configuration.getBoolean("settings.query-plugins");
+        return serverConfiguration.configuration().getBoolean("settings.query-plugins"); // TokyPaper
     }
 
     @Override
@@ -754,12 +668,12 @@ public final class CraftServer implements Server {
 
     @Override
     public String getUpdateFolder() {
-        return this.configuration.getString("settings.update-folder", "update");
+        return serverConfiguration.configuration().getString("settings.update-folder", "update"); // TokyPaper
     }
 
     @Override
     public File getUpdateFolderFile() {
-        return new File((File) console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
+        return new File((File) console.options.valueOf("plugins"), serverConfiguration.configuration().getString("settings.update-folder", "update")); // TokyPaper
     }
 
     @Override
@@ -768,7 +682,7 @@ public final class CraftServer implements Server {
         if (org.spigotmc.SpigotConfig.bungee || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) { // Paper - Velocity support
             return -1;
         } else {
-            return this.configuration.getInt("settings.connection-throttle");
+            return serverConfiguration.configuration().getInt("settings.connection-throttle"); // TokyPaper
         }
         // Spigot End
     }
@@ -813,7 +727,7 @@ public final class CraftServer implements Server {
     public int getTicksPerSpawns(SpawnCategory spawnCategory) {
         Validate.notNull(spawnCategory, "SpawnCategory cannot be null");
         Validate.isTrue(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " are not supported.");
-        return this.configuration.getInt(CraftSpawnCategory.getConfigNameTicksPerSpawn(spawnCategory));
+        return serverConfiguration.configuration().getInt(CraftSpawnCategory.getConfigNameTicksPerSpawn(spawnCategory)); // TokyPaper
     }
 
     @Override
@@ -912,8 +826,8 @@ public final class CraftServer implements Server {
     public void reload() {
         org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
         this.reloadCount++;
-        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
-        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
+        serverConfiguration.setConfiguration(YamlConfiguration.loadConfiguration(serverConfiguration.getConfigFile())); // TokyPaper
+        serverConfiguration.setCommandsConfiguration(YamlConfiguration.loadConfiguration(serverConfiguration.getCommandsConfigFile())); // TokyPaper
 
         console.settings = new DedicatedServerSettings(console.options);
         DedicatedServerProperties config = console.settings.getProperties();
@@ -921,12 +835,14 @@ public final class CraftServer implements Server {
         this.console.setPvpAllowed(config.pvp);
         this.console.setFlightAllowed(config.allowFlight);
         this.console.setMotd(config.motd);
-        this.overrideSpawnLimits();
-        this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
-        TicketType.PLUGIN.timeout = Math.min(20, configuration.getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
-        this.minimumAPI = this.configuration.getString("settings.minimum-api");
+		// TokyPaper start
+        serverConfiguration.overrideSpawnLimits();
+        serverConfiguration.setWarningState(WarningState.value(serverConfiguration.configuration().getString("settings.deprecated-verbose")));
+        TicketType.PLUGIN.timeout = Math.min(20, serverConfiguration.configuration().getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
+        serverConfiguration.minimumAPI = serverConfiguration.configuration().getString("settings.minimum-api");
+		// TokyPaper end
         this.printSaveWarning = false;
-        console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
+        console.autosavePeriod = serverConfiguration.configuration().getInt("ticks-per.autosave"); // TokyPaper
         this.loadIcon();
 
         try {
@@ -972,8 +888,8 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
-        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+        serverConfiguration.setOverrideAllCommandBlockCommands(serverConfiguration.commandsConfiguration().getStringList("command-block-overrides").contains("*")); // TokyPaper
+        serverConfiguration.setIgnoreVanillaPermissions(serverConfiguration.commandsConfiguration().getBoolean("ignore-vanilla-permissions")); // TokyPaper
 
         int pollCount = 0;
 
@@ -1051,7 +967,7 @@ public final class CraftServer implements Server {
 
     @SuppressWarnings({ "unchecked", "finally" })
     private void loadCustomPermissions() {
-        File file = new File(this.configuration.getString("settings.permissions-file"));
+        File file = new File(serverConfiguration.configuration().getString("settings.permissions-file"));
         FileInputStream stream;
 
         try {
@@ -1518,7 +1434,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Map<String, String[]> getCommandAliases() {
-        ConfigurationSection section = this.commandsConfiguration.getConfigurationSection("aliases");
+        ConfigurationSection section = serverConfiguration.commandsConfiguration().getConfigurationSection("aliases");
         Map<String, String[]> result = new LinkedHashMap<String, String[]>();
 
         if (section != null) {
@@ -1539,12 +1455,12 @@ public final class CraftServer implements Server {
     }
 
     public void removeBukkitSpawnRadius() {
-        this.configuration.set("settings.spawn-radius", null);
-        this.saveConfig();
+        serverConfiguration.configuration().set("settings.spawn-radius", null); // TokyPaper
+        serverConfiguration.saveConfig(); // TokyPaper
     }
 
     public int getBukkitSpawnRadius() {
-        return this.configuration.getInt("settings.spawn-radius", -1);
+        return serverConfiguration.configuration().getInt("settings.spawn-radius", -1); // TokyPaper
     }
 
     // Paper start
@@ -1557,7 +1473,7 @@ public final class CraftServer implements Server {
     @Override
     @Deprecated // Paper
     public String getShutdownMessage() {
-        return this.configuration.getString("settings.shutdown-message");
+        return serverConfiguration.configuration().getString("settings.shutdown-message"); // TokyPaper
     }
 
     @Override
@@ -1567,8 +1483,8 @@ public final class CraftServer implements Server {
 
     @Override
     public void setSpawnRadius(int value) {
-        this.configuration.set("settings.spawn-radius", value);
-        this.saveConfig();
+        serverConfiguration.configuration().set("settings.spawn-radius", value); // TokyPaper
+        serverConfiguration.saveConfig(); // TokyPaper
     }
 
     @Override
@@ -1602,7 +1518,7 @@ public final class CraftServer implements Server {
     }
 
     public ChunkGenerator getGenerator(String world) {
-        ConfigurationSection section = this.configuration.getConfigurationSection("worlds");
+        ConfigurationSection section = serverConfiguration.configuration().getConfigurationSection("worlds");
         ChunkGenerator result = null;
 
         if (section != null) {
@@ -1638,7 +1554,7 @@ public final class CraftServer implements Server {
     }
 
     public BiomeProvider getBiomeProvider(String world) {
-        ConfigurationSection section = this.configuration.getConfigurationSection("worlds");
+        ConfigurationSection section = serverConfiguration.configuration().getConfigurationSection("worlds");
         BiomeProvider result = null;
 
         if (section != null) {
@@ -2156,7 +2072,7 @@ public final class CraftServer implements Server {
     }
     public int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) {
         // Paper end
-        return this.spawnCategoryLimit.getOrDefault(spawnCategory, -1);
+        return serverConfiguration.spawnCategoryLimit().getOrDefault(spawnCategory, -1);
     }
 
     @Override
@@ -2177,7 +2093,7 @@ public final class CraftServer implements Server {
 
     @Override
     public WarningState getWarningState() {
-        return this.warningState;
+        return serverConfiguration.warningState(); // TokyPaper
     }
 
     public List<String> tabComplete(CommandSender sender, String message, ServerLevel world, Vec3 pos, boolean forceCommand) {
@@ -2269,7 +2185,7 @@ public final class CraftServer implements Server {
             return;
         }
         this.printSaveWarning = true;
-        this.getLogger().log(Level.WARNING, "A manual (plugin-induced) save has been detected while server is configured to auto-save. This may affect performance.", this.warningState == WarningState.ON ? new Throwable() : null);
+        this.getLogger().log(Level.WARNING, "A manual (plugin-induced) save has been detected while server is configured to auto-save. This may affect performance.", serverConfiguration.warningState() == WarningState.ON ? new Throwable() : null); // TokyPaper
     }
 
     @Override
@@ -2697,7 +2613,7 @@ public final class CraftServer implements Server {
         @Override
         public YamlConfiguration getBukkitConfig()
         {
-            return configuration;
+            return serverConfiguration.configuration();
         }
 
         @Override
@@ -2800,9 +2716,9 @@ public final class CraftServer implements Server {
                 .map(key -> key.toLowerCase(java.util.Locale.ENGLISH))
                 .collect(java.util.stream.Collectors.toSet());
         getCommandMap().getKnownCommands().keySet().removeIf(removals::contains);
-        File file = getCommandsConfigFile();
+        File file = serverConfiguration.getCommandsConfigFile(); // TokyPaper
         try {
-            commandsConfiguration.load(file);
+            serverConfiguration.commandsConfiguration().load(file); // TokyPaper
         } catch (FileNotFoundException ex) {
             return false;
         } catch (IOException | org.bukkit.configuration.InvalidConfigurationException ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 1628913b1e9b91e68dcd942a38da4aed95b12d4a..be9e11b93e592f0980ecf5c2b39765a8e9e8854e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -365,7 +365,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
-        String minimumVersion = MinecraftServer.getServer().server.minimumAPI;
+        String minimumVersion = MinecraftServer.getServer().server.serverConfiguration.minimumAPI; // TokyPaper
         int minimumIndex = CraftMagicNumbers.SUPPORTED_API.indexOf(minimumVersion);
 
         if (pdf.getAPIVersion() != null) {
