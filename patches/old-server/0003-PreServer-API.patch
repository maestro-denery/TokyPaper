From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Mon, 30 May 2022 22:41:24 +0300
Subject: [PATCH] PreServer-API


diff --git a/src/main/java/net/drf/drfpaper/impl/server/DRFPreServer.java b/src/main/java/net/drf/drfpaper/impl/server/DRFPreServer.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc163886c2c27f7dfa58b3a99d42ede869cfc4b9
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/impl/server/DRFPreServer.java
@@ -0,0 +1,89 @@
+package net.drf.drfpaper.impl.server;
+
+import java.io.File;
+
+import net.drf.drfpaper.api.server.PreServer;
+
+import net.minecraft.server.MinecraftServer;
+
+import org.jetbrains.annotations.NotNull;
+
+import net.minecraft.server.commands.ReloadCommand;
+import net.minecraft.server.dedicated.DedicatedServer;
+
+/**
+ * Mainly copied from {@link org.bukkit.craftbukkit.CraftServer}
+ */
+public final class DRFPreServer implements PreServer {
+	public DedicatedServer handle;
+	public DRFPreServer(DedicatedServer handle) {
+		this.handle = handle;
+	}
+
+	@Override
+	public @NotNull String getMinecraftVersion() {
+		return handle.getServerVersion();
+	}
+
+	@Override
+	public void reloadData() {
+		ReloadCommand.reload(handle);
+	}
+
+	@Override
+	public File getWorldContainer() {
+		return handle.storageSource.getDimensionPath(net.minecraft.world.level.Level.OVERWORLD).getParent().toFile();
+	}
+
+	@Override
+	public boolean isPrimaryThread() {
+		/**
+		 * 	copied from {@link org.bukkit.craftbukkit.CraftServer#isPrimaryThread()}
+ 		 */
+		return Thread.currentThread().equals(handle.serverThread) || Thread.currentThread().equals(net.minecraft.server.MinecraftServer.getServer().shutdownThread);
+	}
+
+	@Override
+	public int getCurrentTick() {
+		return MinecraftServer.currentTick;
+	}
+
+	@Override
+	public void setIdleTimeout(int threshold) {
+		handle.setPlayerIdleTimeout(threshold);
+	}
+
+	@Override
+	public int getIdleTimeout() {
+		return handle.getPlayerIdleTimeout();
+	}
+
+	@Override
+	public double[] getTPS() {
+		return new double[] {
+				net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
+				net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
+				net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
+		};
+	}
+
+	@Override
+	public long[] getTickTimes() {
+		return handle.tickTimes5s.getTimes();
+	}
+
+	@Override
+	public double getAverageTickTime() {
+		return handle.tickTimes5s.getAverage();
+	}
+
+	@Override
+	public boolean isStopping() {
+		return net.minecraft.server.MinecraftServer.getServer().hasStopped();
+	}
+
+	@Override
+	public void shutdown() {
+		handle.halt(false);
+	}
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 2f7343dad6d227e9bbe94b7e5a99baa7066aa25b..db2fbe0aca4a02b3a118d1bdb66511a9715d6464 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -268,7 +268,10 @@ public class Main {
             Class.forName(net.minecraft.world.entity.npc.VillagerTrades.class.getName());// Paper - load this sync so it won't fail later async
             final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
                 DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, config.get(), ops.get(), thread, convertable_conversionsession, resourcepackrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new);
-
+				// DRFPaper start - PreServer API
+				final net.drf.drfpaper.impl.server.DRFPreServer preServer = new net.drf.drfpaper.impl.server.DRFPreServer(dedicatedserver1);
+				net.drf.drfpaper.DRFPaper.INSTANCE.setPreServer(preServer);
+				// DRFPaper end
                 /*
                 dedicatedserver1.setSingleplayerName((String) optionset.valueOf(optionspec8));
                 dedicatedserver1.setPort((Integer) optionset.valueOf(optionspec11));
